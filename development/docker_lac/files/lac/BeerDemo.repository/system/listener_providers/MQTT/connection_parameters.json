[
  {
    "name": "automaticReconnect",
    "description": "Sets whether the client will automatically attempt to reconnect to the server if the connection is lost.<p/>If set to false, the client will not attempt to automatically reconnect to the server in the event that the connection is lost.<br/>If set to true, in the event that the connection is lost, the client will attempt to reconnect to the server. It will initially wait 1 second before it attempts to reconnect, for every failed reconnect attempt, the delay will double until it is at 2 minutes at which point the delay will stay at 2 minutes.",
    "kind": null,
    "datatype": "boolean",
    "isRequired": true,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "true",
    "isDeprecated": false
  },
  {
    "name": "broker",
    "description": "URL of the broker. For example :- tcp://localhost:1883",
    "kind": null,
    "datatype": "string",
    "isRequired": true,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "cleanSession",
    "description": "Sets whether the client and server should remember state across restarts and reconnects. If set to false both the client and server will maintain state across restarts of the client, the server and the connection. As state is maintained:Message delivery will be reliable meeting the specified QOS even if the client, server or connection are restarted.The server will treat a subscription as durable.If set to true the client and server will not maintain state across restarts of the client, the server or the connection. This meansMessage delivery to the specified QOS cannot be maintained if the client, server or connection are restartedThe server will treat a subscription as non-durable",
    "kind": null,
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "true",
    "isDeprecated": false
  },
  {
    "name": "clientId",
    "description": "The Identifier for the client. Default is <i>RANDOM</i>, which assign a random client identifier for this connection. The assigned clientId can be found in the log entry when the connection is started. </br>Warning: The use of the same clientId by different clients to the MQTT broker can result in the unexpected closure of connections. Ensure that you assign a unique clientId for every connection set up to the MQTT broker.",
    "kind": null,
    "datatype": "string",
    "isRequired": true,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "RANDOM",
    "isDeprecated": false
  },
  {
    "name": "com.ibm.ssl.contextProvider",
    "description": "Underlying JSSE provider. For example IBMJSSE2 or SunJSSE",
    "kind": null,
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "com.ibm.ssl.enabledCipherSuites",
    "description": "A list of which ciphers are enabled. Values are dependent on the provider, for example: SSL_RSA_WITH_AES_128_CBC_SHA;SSL_RSA_WITH_3DES_EDE_CBC_SHA.",
    "kind": null,
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "com.ibm.ssl.keyManager",
    "description": "Sets the algorithm that will be used to instantiate a KeyManagerFactory object instead of using the default algorithm available in the platform. Example values: IbmX509 or IBMJ9X509",
    "kind": null,
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "com.ibm.ssl.keyStore",
    "description": "The name of the file that contains the KeyStore object that you want the KeyManager to use. For example /mydir/etc/key.p12",
    "kind": null,
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "com.ibm.ssl.keyStorePassword",
    "description": "The password for the KeyStore object that you want the KeyManager to use. This password is stored in encrypted form.",
    "kind": null,
    "datatype": "password",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "com.ibm.ssl.keyStoreProvider",
    "description": "Key store provider, for example IBMJCE or IBMJCEFIPS",
    "kind": null,
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "com.ibm.ssl.keyStoreType",
    "description": "Type of key store, for example PKCS12, JKS, or JCEKS",
    "kind": null,
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "com.ibm.ssl.protocol",
    "description": "One of: SSL, SSLv3, TLS, TLSv1, SSL_TLS",
    "kind": null,
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "com.ibm.ssl.trustManager",
    "description": "Sets the algorithm that will be used to instantiate a TrustManagerFactory object instead of using the default algorithm available in the platform. Example values: PKIX or IBMJ9X509",
    "kind": null,
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "com.ibm.ssl.trustStore",
    "description": "The name of the file that contains the KeyStore object that you want the TrustManager to use",
    "kind": null,
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "com.ibm.ssl.trustStorePassword",
    "description": "The password for the TrustStore object that you want the TrustManager to use. This password is stored in encrypted form.",
    "kind": null,
    "datatype": "password",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "com.ibm.ssl.trustStoreProvider",
    "description": "Trust store provider, for example IBMJCE or IBMJCEFIPS",
    "kind": null,
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "com.ibm.ssl.trustStoreType",
    "description": "The type of KeyStore object that you want the default TrustManager to use. Same possible values as keyStoreType",
    "kind": null,
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "connectionTimeout",
    "description": "Sets the connection timeout value. This value, measured in seconds, defines the maximum time interval the client will wait for the network connection to the MQTT server to be established. The default timeout is 30 seconds. A value of 0 disables timeout processing meaning the client will wait until the network connection is made successfully or fails.",
    "kind": null,
    "datatype": "number",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "30",
    "isDeprecated": false
  },
  {
    "name": "keepAliveInterval",
    "description": "Sets the \"keep alive\" interval. This value, measured in seconds, defines the maximum time interval between messages sent or received. It enables the client to detect if the server is no longer available, without having to wait for the TCP/IP timeout. The client will ensure that at least one message travels across the network within each keep alive period. In the absence of a data-related message during the time period, the client sends a very small \"ping\" message, which the server will acknowledge. A value of 0 disables keepalive processing in the client.",
    "kind": null,
    "datatype": "number",
    "isRequired": true,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "0",
    "isDeprecated": false
  },
  {
    "name": "manualAcks",
    "description": "If manualAcks is set to true, then on completion of the messageArrived callback the MQTT acknowledgements are not sent. You must call messageArrivedComplete to send those acknowledgements. This allows finer control over when the acks are sent. The default behaviour, when manualAcks is false, is to send the MQTT acknowledgements automatically at the successful completion of the messageArrived callback method.",
    "kind": null,
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "false",
    "isDeprecated": false
  },
  {
    "name": "maxInflight",
    "description": "Sets the \"max inflight\". Please increase this value in a high traffic environment.The default value is 10",
    "kind": null,
    "datatype": "number",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "10",
    "isDeprecated": false
  },
  {
    "name": "password",
    "description": "Sets the password to use for the connection",
    "kind": null,
    "datatype": "password",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "serverURIs",
    "description": "Comma separated list of broker URIs.\nEach serverURI specifies the address of a server that the client may connect to.\nTwo types of connection are supported:<ul><li>tcp:// for a TCP connection<li>ssl:// for a TCP connection secured by SSL/TLS<ul>.\nFor example:tcp://localhost:1883<br/>ssl://localhost:8883If the port is not specified, it will default to 1883 for tcp:// URIs, and 8883 for ssl:// URIs.\n<p/>If serverURIs is set, then it overrides the broker parameter.\n<p/>When an attempt to connect is initiated the client will start with the first serverURI in the list and work through the list until a connection is established with a server.\nIf a connection cannot be made to any of the servers then the connect attempt fails.<p/>\nSpecifying a list of servers that a client may connect to has several uses:<br/>\n<h4>High Availability and reliable message delivery</h4>Some MQTT servers support a high availability feature where two or more \"equal\" MQTT servers share state.\nAn MQTT client can connect to any of the \"equal\" servers and be assured that messages are reliably delivered and durable subscriptions are maintained no matter which server the client connects to.\n<p/>The cleansession flag must be set to false if durable subscriptions and/or reliable message delivery is required.\n<p/><h4>Hunt List</h4>A set of servers may be specified that are not \"equal\" (as in the high availability option).\nAs no state is shared across the servers reliable message delivery and durable subscriptions are not valid.\nThe cleansession flag must be set to true if the hunt list mode is used.",
    "kind": null,
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "userName",
    "description": "Sets the user name to use for the connection",
    "kind": null,
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  }
]
