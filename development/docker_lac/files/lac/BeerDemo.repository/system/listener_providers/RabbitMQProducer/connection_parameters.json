[
  {
    "name": "autoAck",
    "description": "If messages should be auto acknowledged",
    "kind": "parameter",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "consumer",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "autoDelete",
    "description": "If it is true the exchange will be deleted when it is no longer in use",
    "kind": "parameter",
    "datatype": "boolean",
    "isRequired": true,
    "isMultipleOk": false,
    "group": "common",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": "falsee",
    "isDeprecated": false
  },
  {
    "name": "automaticRecoveryEnabled",
    "description": "Enables connection automatic recovery (uses connection implementation that performs automatic recovery when connection shutdown is not initiated by the application)",
    "kind": "parameter",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "advanced",
    "javaType": "java.lang.Boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "bridgeEndpoint",
    "description": "If the bridgeEndpoint is true the producer will ignore the message header of rabbitmq.EXCHANGE_NAME and rabbitmq.ROUTING_KEY",
    "kind": "parameter",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "producer",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "bridgeErrorHandler",
    "description": "Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN or ERROR level and ignored.",
    "kind": "parameter",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "consumer",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "channelPoolMaxSize",
    "description": "Get maximum number of opened channel in pool",
    "kind": "parameter",
    "datatype": "integer",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "producer",
    "javaType": "int",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "channelPoolMaxWait",
    "description": "Set the maximum number of milliseconds to wait for a channel from the pool",
    "kind": "parameter",
    "datatype": "integer",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "producer",
    "javaType": "long",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "concurrentConsumers",
    "description": "Number of concurrent consumers when consuming from broker. (eg similar as to the same option for the JMS component).",
    "kind": "parameter",
    "datatype": "integer",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "consumer",
    "javaType": "int",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "connectionTimeout",
    "description": "Connection timeout",
    "kind": "parameter",
    "datatype": "integer",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "common",
    "javaType": "int",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "deadLetterExchange",
    "description": "The name of the dead letter exchange",
    "kind": "parameter",
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "common",
    "javaType": "java.lang.String",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "deadLetterExchangeType",
    "description": "The type of the dead letter exchange",
    "kind": "parameter",
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "common",
    "javaType": "java.lang.String",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "deadLetterQueue",
    "description": "The name of the dead letter queue",
    "kind": "parameter",
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "common",
    "javaType": "java.lang.String",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "deadLetterRoutingKey",
    "description": "The routing key for the dead letter exchange",
    "kind": "parameter",
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "common",
    "javaType": "java.lang.String",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "declare",
    "description": "If the option is true camel declare the exchange and queue name and bind them together. If the option is false camel won't declare the exchange and queue name on the server.",
    "kind": "parameter",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "common",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "durable",
    "description": "If we are declaring a durable exchange (the exchange will survive a server restart)",
    "kind": "parameter",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "common",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "exchangeName",
    "description": "The exchange name determines which exchange produced messages will sent to. In the case of consumers the exchange name determines which exchange the queue will bind to.",
    "kind": "path",
    "datatype": "string",
    "isRequired": true,
    "isMultipleOk": false,
    "group": "common",
    "javaType": "java.lang.String",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "exchangeType",
    "description": "The exchange type such as direct, topic or fanout.",
    "kind": "parameter",
    "datatype": "string",
    "isRequired": true,
    "isMultipleOk": false,
    "group": "common",
    "javaType": "java.lang.String",
    "isSecret": false,
    "defaultValue": "topic",
    "isDeprecated": false
  },
  {
    "name": "exclusive",
    "description": "Exclusive queues may only be accessed by the current connection and are deleted when that connection closes.",
    "kind": "parameter",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "common",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "guaranteedDeliveries",
    "description": "When true an exception will be thrown when the message cannot be delivered (basic.return) and the message is marked as mandatory. PublisherAcknowledgement will also be activated in this case See also a href=https://www.rabbitmq.com/confirms.htmlpublisher acknowledgements - When will messages be confirmed",
    "kind": "parameter",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "producer",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "hostname",
    "description": "The hostname of the running rabbitmq instance or cluster.",
    "kind": "path",
    "datatype": "string",
    "isRequired": true,
    "isMultipleOk": false,
    "group": "common",
    "javaType": "java.lang.String",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "immediate",
    "description": "This flag tells the server how to react if the message cannot be routed to a queue consumer immediately. If this flag is set the server will return an undeliverable message with a Return method. If this flag is zero the server will queue the message but with no guarantee that it will ever be consumed. If the header is present rabbitmq.IMMEDIATE it will override this option.",
    "kind": "parameter",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "producer",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "mandatory",
    "description": "This flag tells the server how to react if the message cannot be routed to a queue. If this flag is set the server will return an unroutable message with a Return method. If this flag is zero the server silently drops the message. If the header is present rabbitmq.MANDATORY it will override this option.",
    "kind": "parameter",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "producer",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "networkRecoveryInterval",
    "description": "Network recovery interval in milliseconds (interval used when recovering from network failure)",
    "kind": "parameter",
    "datatype": "integer",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "advanced",
    "javaType": "java.lang.Integer",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "passive",
    "description": "Passive queues depend on the queue already to be available at RabbitMQ.",
    "kind": "parameter",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "common",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "password",
    "description": "Password for authenticated access",
    "kind": "parameter",
    "datatype": "password",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "security",
    "javaType": "java.lang.String",
    "isSecret": true,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "portNumber",
    "description": "Port number for the host with the running rabbitmq instance or cluster. Default value is 5672.",
    "kind": "path",
    "datatype": "integer",
    "isRequired": true,
    "isMultipleOk": false,
    "group": "common",
    "javaType": "int",
    "isSecret": false,
    "defaultValue": "5672",
    "isDeprecated": false
  },
  {
    "name": "prefetchCount",
    "description": "The maximum number of messages that the server will deliver 0 if unlimited. You need to specify the option of prefetchSize prefetchCount prefetchGlobal at the same time",
    "kind": "parameter",
    "datatype": "integer",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "consumer",
    "javaType": "int",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "prefetchEnabled",
    "description": "Enables the quality of service on the RabbitMQConsumer side. You need to specify the option of prefetchSize prefetchCount prefetchGlobal at the same time",
    "kind": "parameter",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "consumer",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "prefetchGlobal",
    "description": "If the settings should be applied to the entire channel rather than each consumer You need to specify the option of prefetchSize prefetchCount prefetchGlobal at the same time",
    "kind": "parameter",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "consumer",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "prefetchSize",
    "description": "The maximum amount of content (measured in octets) that the server will deliver 0 if unlimited. You need to specify the option of prefetchSize prefetchCount prefetchGlobal at the same time",
    "kind": "parameter",
    "datatype": "integer",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "consumer",
    "javaType": "int",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "publisherAcknowledgements",
    "description": "When true the message will be published with publisher acknowledgements turned on",
    "kind": "parameter",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "producer",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "publisherAcknowledgementsTimeout",
    "description": "The amount of time in milliseconds to wait for a basic.ack response from RabbitMQ server",
    "kind": "parameter",
    "datatype": "integer",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "producer",
    "javaType": "long",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "queue",
    "description": "The queue to receive messages from",
    "kind": "parameter",
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "common",
    "javaType": "java.lang.String",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "requestedChannelMax",
    "description": "Connection requested channel max (max number of channels offered)",
    "kind": "parameter",
    "datatype": "integer",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "advanced",
    "javaType": "int",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "requestedFrameMax",
    "description": "Connection requested frame max (max size of frame offered)",
    "kind": "parameter",
    "datatype": "integer",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "advanced",
    "javaType": "int",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "requestedHeartbeat",
    "description": "Connection requested heartbeat (heart-beat in seconds offered)",
    "kind": "parameter",
    "datatype": "integer",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "advanced",
    "javaType": "int",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "requestTimeout",
    "description": "Set timeout for waiting for a reply when using the InOut Exchange Pattern (in milliseconds)",
    "kind": "parameter",
    "datatype": "integer",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "advanced",
    "javaType": "long",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "requestTimeoutCheckerInterval",
    "description": "Set requestTimeoutCheckerInterval for inOut exchange",
    "kind": "parameter",
    "datatype": "integer",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "advanced",
    "javaType": "long",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "routingKey",
    "description": "The routing key to use when binding a consumer queue to the exchange. For producer routing keys you set the header rabbitmq.ROUTING_KEY.",
    "kind": "parameter",
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "common",
    "javaType": "java.lang.String",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "skipExchangeDeclare",
    "description": "This can be used if we need to declare the queue but not the exchange",
    "kind": "parameter",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "common",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "skipQueueBind",
    "description": "If true the queue will not be bound to the exchange after declaring it",
    "kind": "parameter",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "common",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "skipQueueDeclare",
    "description": "If true the producer will not declare and bind a queue. This can be used for directing messages via an existing routing key.",
    "kind": "parameter",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "common",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "sslProtocol",
    "description": "Enables SSL on connection accepted value are true TLS and 'SSLv3",
    "kind": "parameter",
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "security",
    "javaType": "java.lang.String",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "synchronous",
    "description": "Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).",
    "kind": "parameter",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "advanced",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "threadPoolSize",
    "description": "The consumer uses a Thread Pool Executor with a fixed number of threads. This setting allows you to set that number of threads.",
    "kind": "parameter",
    "datatype": "integer",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "consumer (advanced)",
    "javaType": "int",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "topologyRecoveryEnabled",
    "description": "Enables connection topology recovery (should topology recovery be performed)",
    "kind": "parameter",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "advanced",
    "javaType": "java.lang.Boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "transferException",
    "description": "When true and an inOut Exchange failed on the consumer side send the caused Exception back in the response",
    "kind": "parameter",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "advanced",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "username",
    "description": "Username in case of authenticated access",
    "kind": "parameter",
    "datatype": "password",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "security",
    "javaType": "java.lang.String",
    "isSecret": true,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "vhost",
    "description": "The vhost for the channel",
    "kind": "parameter",
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "common",
    "javaType": "java.lang.String",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  }
]
