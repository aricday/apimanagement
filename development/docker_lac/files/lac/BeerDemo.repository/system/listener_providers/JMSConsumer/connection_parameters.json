[
  {
    "name": "acceptMessagesWhileStopping",
    "description": "Specifies whether the consumer accept messages while it is stopping. You may consider enabling this option if you start and stop JMS routes at runtime while there are still messages enqueued on the queue. If this option is false and you stop the JMS route then messages may be rejected and the JMS broker would have to attempt redeliveries which yet again may be rejected and eventually the message may be moved at a dead letter queue on the JMS broker. To avoid this its recommended to enable this option.",
    "kind": "property",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "consumer (advanced)",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "acknowledgementModeName",
    "description": "The JMS acknowledgement name which is one of: SESSION_TRANSACTED CLIENT_ACKNOWLEDGE AUTO_ACKNOWLEDGE DUPS_OK_ACKNOWLEDGE",
    "kind": "property",
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "consumer",
    "javaType": "java.lang.String",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "allowAdditionalHeaders",
    "description": "This option is used to allow additional headers which may have values that are invalid according to JMS specification. For example some message systems such as WMQ do this with header names using prefix JMS_IBM_MQMD_ containing values with byte array or other invalid types. You can specify multiple header names separated by comma and use as suffix for wildcard matching.",
    "kind": "property",
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "producer (advanced)",
    "javaType": "java.lang.String",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "allowNullBody",
    "description": "Whether to allow sending messages with no body. If this option is false and the message body is null then an JMSException is thrown.",
    "kind": "property",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "producer (advanced)",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "allowReplyManagerQuickStop",
    "description": "Whether the DefaultMessageListenerContainer used in the reply managers for request-reply messaging allow the DefaultMessageListenerContainer.runningAllowed flag to quick stop in case JmsConfigurationisAcceptMessagesWhileStopping is enabled and org.apache.camel.CamelContext is currently being stopped. This quick stop ability is enabled by default in the regular JMS consumers but to enable for reply managers you must enable this flag.",
    "kind": "property",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "consumer (advanced)",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "alwaysCopyMessage",
    "description": "If true Camel will always make a JMS message copy of the message when it is passed to the producer for sending. Copying the message is needed in some situations such as when a replyToDestinationSelectorName is set (incidentally Camel will set the alwaysCopyMessage option to true if a replyToDestinationSelectorName is set)",
    "kind": "property",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "producer (advanced)",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "asyncConsumer",
    "description": "Whether the JmsConsumer processes the Exchange asynchronously. If enabled then the JmsConsumer may pickup the next message from the JMS queue while the previous message is being processed asynchronously (by the Asynchronous Routing Engine). This means that messages may be processed not 100 strictly in order. If disabled (as default) then the Exchange is fully processed before the JmsConsumer will pickup the next message from the JMS queue. Note if transacted has been enabled then asyncConsumer=true does not run asynchronously as transaction must be executed synchronously (Camel 3.0 may support async transactions).",
    "kind": "property",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "consumer",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "asyncStartListener",
    "description": "Whether to startup the JmsConsumer message listener asynchronously when starting a route. For example if a JmsConsumer cannot get a connection to a remote JMS broker then it may block while retrying and/or failover. This will cause Camel to block while starting routes. By setting this option to true you will let routes startup while the JmsConsumer connects to the JMS broker using a dedicated thread in asynchronous mode. If this option is used then beware that if the connection could not be established then an exception is logged at WARN level and the consumer will not be able to receive messages; You can then restart the route to retry.",
    "kind": "property",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "advanced",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "asyncStopListener",
    "description": "Whether to stop the JmsConsumer message listener asynchronously when stopping a route.",
    "kind": "property",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "advanced",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "autoStartup",
    "description": "Specifies whether the consumer container should auto-startup.",
    "kind": "property",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "consumer",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "cacheLevel",
    "description": "Sets the cache level by ID for the underlying JMS resources. See cacheLevelName option for more details.",
    "kind": "property",
    "datatype": "integer",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "consumer",
    "javaType": "int",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "cacheLevelName",
    "description": "Sets the cache level by name for the underlying JMS resources. Possible values are: CACHE_AUTO CACHE_CONNECTION CACHE_CONSUMER CACHE_NONE and CACHE_SESSION. The default setting is CACHE_AUTO. See the Spring documentation and Transactions Cache Levels for more information.",
    "kind": "property",
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "consumer",
    "javaType": "java.lang.String",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "clientId",
    "description": "Sets the JMS client ID to use. Note that this value if specified must be unique and can only be used by a single JMS connection instance. It is typically only required for durable topic subscriptions. If using Apache ActiveMQ you may prefer to use Virtual Topics instead.",
    "kind": "property",
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "common",
    "javaType": "java.lang.String",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "concurrentConsumers",
    "description": "Specifies the default number of concurrent consumers when consuming from JMS (not for request/reply over JMS). See also the maxMessagesPerTask option to control dynamic scaling up/down of threads. When doing request/reply over JMS then the option replyToConcurrentConsumers is used to control number of concurrent consumers on the reply message listener.",
    "kind": "property",
    "datatype": "integer",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "consumer",
    "javaType": "int",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "connectionFactory",
    "description": "The connection factory to be used. The value should contain a JavaScript code that should return an instance of javax.jmx.ConnectionFactory to be used for this JMS connection.",
    "kind": "property",
    "datatype": "object",
    "isRequired": true,
    "isMultipleOk": false,
    "group": "common",
    "javaType": "javax.jms.ConnectionFactory",
    "isSecret": false,
    "defaultValue": "//Below is a sample code for setting an ActiveMQ provider. Assumption is that ActiveMQConnectionFactory is available in the classpath.\nvar activeMQURL = \"tcp://localhost:32768\";\nvar ActiveMQConnectionFactory = Java.type(\"org.apache.activemq.ActiveMQConnectionFactory\");\nvar fact = new ActiveMQConnectionFactory(activeMQURL);\nreturn fact",
    "isDeprecated": false
  },
  {
    "name": "correlationProperty",
    "description": "Use this JMS property to correlate messages in InOut exchange pattern (request-reply) instead of JMSCorrelationID property. This allows you to exchange messages with systems that do not correlate messages using JMSCorrelationID JMS property. If used JMSCorrelationID will not be used or set by Camel. The value of here named property will be generated if not supplied in the header of the message under the same name.",
    "kind": "property",
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "producer (advanced)",
    "javaType": "java.lang.String",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "defaultTaskExecutorType",
    "description": "Specifies what default TaskExecutor type to use in the DefaultMessageListenerContainer for both consumer endpoints and the ReplyTo consumer of producer endpoints. Possible values: SimpleAsync (uses Spring's SimpleAsyncTaskExecutor) or ThreadPool (uses Spring's ThreadPoolTaskExecutor with optimal values - cached threadpool-like). If not set it defaults to the previous behaviour which uses a cached thread pool for consumer endpoints and SimpleAsync for reply consumers. The use of ThreadPool is recommended to reduce thread trash in elastic configurations with dynamically increasing and decreasing concurrent consumers.",
    "kind": "property",
    "datatype": "object",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "consumer (advanced)",
    "javaType": "org.apache.camel.component.jms.DefaultTaskExecutorType",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "deliveryMode",
    "description": "Specifies the delivery mode to be used. Possible values are Possibles values are those defined by javax.jms.DeliveryMode. NON_PERSISTENT = 1 and PERSISTENT = 2.",
    "kind": "property",
    "datatype": "integer",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "producer",
    "javaType": "java.lang.Integer",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "deliveryPersistent",
    "description": "Specifies whether persistent delivery is used by default.",
    "kind": "property",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "producer",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "destinationResolver",
    "description": "A pluggable org.springframework.jms.support.destination.DestinationResolver that allows you to use your own resolver (for example to lookup the real destination in a JNDI registry).",
    "kind": "property",
    "datatype": "object",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "advanced",
    "javaType": "org.springframework.jms.support.destination.DestinationResolver",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "durableSubscriptionName",
    "description": "The durable subscriber name for specifying durable topic subscriptions. The clientId option must be configured as well.",
    "kind": "property",
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "common",
    "javaType": "java.lang.String",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "eagerLoadingOfProperties",
    "description": "Enables eager loading of JMS properties as soon as a message is loaded which generally is inefficient as the JMS properties may not be required but sometimes can catch early any issues with the underlying JMS provider and the use of JMS properties",
    "kind": "property",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "consumer (advanced)",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "errorHandler",
    "description": "Specifies a org.springframework.util.ErrorHandler to be invoked in case of any uncaught exceptions thrown while processing a Message. By default these exceptions will be logged at the WARN level if no errorHandler has been configured. You can configure logging level and whether stack traces should be logged using errorHandlerLoggingLevel and errorHandlerLogStackTrace options. This makes it much easier to configure than having to code a custom errorHandler.",
    "kind": "property",
    "datatype": "object",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "advanced",
    "javaType": "org.springframework.util.ErrorHandler",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "errorHandlerLoggingLevel",
    "description": "Allows to configure the default errorHandler logging level for logging uncaught exceptions.",
    "kind": "property",
    "datatype": "object",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "logging",
    "javaType": "org.apache.camel.LoggingLevel",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "errorHandlerLogStackTrace",
    "description": "Allows to control whether stacktraces should be logged or not by the default errorHandler.",
    "kind": "property",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "logging",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "exceptionListener",
    "description": "Specifies the JMS Exception Listener that is to be notified of any underlying JMS exceptions.",
    "kind": "property",
    "datatype": "object",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "advanced",
    "javaType": "javax.jms.ExceptionListener",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "explicitQosEnabled",
    "description": "Set if the deliveryMode priority or timeToLive qualities of service should be used when sending messages. This option is based on Spring's JmsTemplate. The deliveryMode priority and timeToLive options are applied to the current endpoint. This contrasts with the preserveMessageQos option which operates at message granularity reading QoS properties exclusively from the Camel In message headers.",
    "kind": "property",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "producer",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "exposeListenerSession",
    "description": "Specifies whether the listener session should be exposed when consuming messages.",
    "kind": "property",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "consumer (advanced)",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "forceSendOriginalMessage",
    "description": "When using mapJmsMessage=false Camel will create a new JMS message to send to a new JMS destination if you touch the headers (get or set) during the route. Set this option to true to force Camel to send the original JMS message that was received.",
    "kind": "property",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "producer (advanced)",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "headerFilterStrategy",
    "description": "To use a custom org.apache.camel.spi.HeaderFilterStrategy to filter header to and from Camel message.",
    "kind": "property",
    "datatype": "object",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "filter",
    "javaType": "org.apache.camel.spi.HeaderFilterStrategy",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "idleConsumerLimit",
    "description": "Specify the limit for the number of consumers that are allowed to be idle at any given time.",
    "kind": "property",
    "datatype": "integer",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "advanced",
    "javaType": "int",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "idleTaskExecutionLimit",
    "description": "Specifies the limit for idle executions of a receive task not having received any message within its execution. If this limit is reached the task will shut down and leave receiving to other executing tasks (in the case of dynamic scheduling; see the maxConcurrentConsumers setting). There is additional doc available from Spring.",
    "kind": "property",
    "datatype": "integer",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "advanced",
    "javaType": "int",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "includeAllJMSXProperties",
    "description": "Whether to include all JMSXxxx properties when mapping from JMS to Camel Message. Setting this to true will include properties such as JMSXAppID and JMSXUserID etc. Note: If you are using a custom headerFilterStrategy then this option does not apply.",
    "kind": "property",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "advanced",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "includeSentJMSMessageID",
    "description": "Only applicable when sending to JMS destination using InOnly (eg fire and forget). Enabling this option will enrich the Camel Exchange with the actual JMSMessageID that was used by the JMS client when the message was sent to the JMS destination.",
    "kind": "property",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "producer (advanced)",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "jmsKeyFormatStrategy",
    "description": "Pluggable strategy for encoding and decoding JMS keys so they can be compliant with the JMS specification. Camel provides two implementations out of the box: default and passthrough. The default strategy will safely marshal dots and hyphens (. and -). The passthrough strategy leaves the key as is. Can be used for JMS brokers which do not care whether JMS header keys contain illegal characters. You can provide your own implementation of the org.apache.camel.component.jms.JmsKeyFormatStrategy and refer to it using the notation.",
    "kind": "property",
    "datatype": "object",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "advanced",
    "javaType": "org.apache.camel.component.jms.JmsKeyFormatStrategy",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "lazyCreateTransactionManager",
    "description": "If true Camel will create a JmsTransactionManager if there is no transactionManager injected when option transacted=true.",
    "kind": "property",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "transaction (advanced)",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "mapJmsMessage",
    "description": "Specifies whether Camel should auto map the received JMS message to a suited payload type such as javax.jms.TextMessage to a String etc. See section about how mapping works below for more details.",
    "kind": "property",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "advanced",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "maxConcurrentConsumers",
    "description": "Specifies the maximum number of concurrent consumers when consuming from JMS (not for request/reply over JMS). See also the maxMessagesPerTask option to control dynamic scaling up/down of threads. When doing request/reply over JMS then the option replyToMaxConcurrentConsumers is used to control number of concurrent consumers on the reply message listener.",
    "kind": "property",
    "datatype": "integer",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "consumer",
    "javaType": "int",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "maxMessagesPerTask",
    "description": "The number of messages per task. -1 is unlimited. If you use a range for concurrent consumers (eg min max) then this option can be used to set a value to eg 100 to control how fast the consumers will shrink when less work is required.",
    "kind": "property",
    "datatype": "integer",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "advanced",
    "javaType": "int",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "messageConverter",
    "description": "To use a custom Spring org.springframework.jms.support.converter.MessageConverter so you can be in control how to map to/from a javax.jms.Message.",
    "kind": "property",
    "datatype": "object",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "advanced",
    "javaType": "org.springframework.jms.support.converter.MessageConverter",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "messageCreatedStrategy",
    "description": "To use the given MessageCreatedStrategy which are invoked when Camel creates new instances of javax.jms.Message objects when Camel is sending a JMS message.",
    "kind": "property",
    "datatype": "object",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "advanced",
    "javaType": "org.apache.camel.component.jms.MessageCreatedStrategy",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "messageIdEnabled",
    "description": "When sending specifies whether message IDs should be added. This is just an hint to the JMS Broker. If the JMS provider accepts this hint these messages must have the message ID set to null; if the provider ignores the hint the message ID must be set to its normal unique value",
    "kind": "property",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "advanced",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "messageTimestampEnabled",
    "description": "Specifies whether timestamps should be enabled by default on sending messages.",
    "kind": "property",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "advanced",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "password",
    "description": "Password to use with the ConnectionFactory. You can also configure username/password directly on the ConnectionFactory.",
    "kind": "property",
    "datatype": "password",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "security",
    "javaType": "java.lang.String",
    "isSecret": true,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "preserveMessageQos",
    "description": "Set to true if you want to send message using the QoS settings specified on the message instead of the QoS settings on the JMS endpoint. The following three headers are considered JMSPriority JMSDeliveryMode and JMSExpiration. You can provide all or only some of them. If not provided Camel will fall back to use the values from the endpoint instead. So when using this option the headers override the values from the endpoint. The explicitQosEnabled option by contrast will only use options set on the endpoint and not values from the message header.",
    "kind": "property",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "producer",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "priority",
    "description": "Values greater than 1 specify the message priority when sending (where 0 is the lowest priority and 9 is the highest). The explicitQosEnabled option must also be enabled in order for this option to have any effect.",
    "kind": "property",
    "datatype": "integer",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "producer",
    "javaType": "int",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "pubSubNoLocal",
    "description": "Specifies whether to inhibit the delivery of messages published by its own connection.",
    "kind": "property",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "advanced",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "receiveTimeout",
    "description": "The timeout for receiving messages (in milliseconds).",
    "kind": "property",
    "datatype": "integer",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "advanced",
    "javaType": "long",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "recoveryInterval",
    "description": "Specifies the interval between recovery attempts i.e. when a connection is being refreshed in milliseconds. The default is 5000 ms that is 5 seconds.",
    "kind": "property",
    "datatype": "integer",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "advanced",
    "javaType": "long",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "replyToCacheLevelName",
    "description": "Sets the cache level by name for the reply consumer when doing request/reply over JMS. This option only applies when using fixed reply queues (not temporary). Camel will by default use: CACHE_CONSUMER for exclusive or shared w/ replyToSelectorName. And CACHE_SESSION for shared without replyToSelectorName. Some JMS brokers such as IBM WebSphere may require to set the replyToCacheLevelName=CACHE_NONE to work. Note: If using temporary queues then CACHE_NONE is not allowed and you must use a higher value such as CACHE_CONSUMER or CACHE_SESSION.",
    "kind": "property",
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "producer (advanced)",
    "javaType": "java.lang.String",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "replyToConcurrentConsumers",
    "description": "Specifies the default number of concurrent consumers when doing request/reply over JMS. See also the maxMessagesPerTask option to control dynamic scaling up/down of threads.",
    "kind": "property",
    "datatype": "integer",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "producer",
    "javaType": "int",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "replyToMaxConcurrentConsumers",
    "description": "Specifies the maximum number of concurrent consumers when using request/reply over JMS. See also the maxMessagesPerTask option to control dynamic scaling up/down of threads.",
    "kind": "property",
    "datatype": "integer",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "producer",
    "javaType": "int",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "replyToType",
    "description": "Allows for explicitly specifying which kind of strategy to use for replyTo queues when doing request/reply over JMS. Possible values are: Temporary Shared or Exclusive. By default Camel will use temporary queues. However if replyTo has been configured then Shared is used by default. This option allows you to use exclusive queues instead of shared ones. See Camel JMS documentation for more details and especially the notes about the implications if running in a clustered environment and the fact that Shared reply queues has lower performance than its alternatives Temporary and Exclusive.",
    "kind": "property",
    "datatype": "object",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "producer",
    "javaType": "org.apache.camel.component.jms.ReplyToType",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "requestTimeout",
    "description": "The timeout for waiting for a reply when using the InOut Exchange Pattern (in milliseconds). The default is 20 seconds. You can include the header CamelJmsRequestTimeout to override this endpoint configured timeout value and thus have per message individual timeout values. See also the requestTimeoutCheckerInterval option.",
    "kind": "property",
    "datatype": "integer",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "producer",
    "javaType": "long",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "requestTimeoutCheckerInterval",
    "description": "Configures how often Camel should check for timed out Exchanges when doing request/reply over JMS. By default Camel checks once per second. But if you must react faster when a timeout occurs then you can lower this interval to check more frequently. The timeout is determined by the option requestTimeout.",
    "kind": "property",
    "datatype": "integer",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "advanced",
    "javaType": "long",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "subscriptionDurable",
    "description": "Set whether to make the subscription durable. The durable subscription name to be used can be specified through the subscriptionName property. Default is false. Set this to true to register a durable subscription typically in combination with a subscriptionName value (unless your message listener class name is good enough as subscription name). Only makes sense when listening to a topic (pub-sub domain) therefore this method switches the pubSubDomain flag as well.",
    "kind": "property",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "consumer",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "subscriptionName",
    "description": "Set the name of a subscription to create. To be applied in case of a topic (pub-sub domain) with a shared or durable subscription. The subscription name needs to be unique within this client's JMS client id. Default is the class name of the specified message listener. Note: Only 1 concurrent consumer (which is the default of this message listener container) is allowed for each subscription except for a shared subscription (which requires JMS 2.0).",
    "kind": "property",
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "consumer",
    "javaType": "java.lang.String",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "subscriptionShared",
    "description": "Set whether to make the subscription shared. The shared subscription name to be used can be specified through the subscriptionName property. Default is false. Set this to true to register a shared subscription typically in combination with a subscriptionName value (unless your message listener class name is good enough as subscription name). Note that shared subscriptions may also be durable so this flag can (and often will) be combined with subscriptionDurable as well. Only makes sense when listening to a topic (pub-sub domain) therefore this method switches the pubSubDomain flag as well. Requires a JMS 2.0 compatible message broker.",
    "kind": "property",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "consumer",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "taskExecutor",
    "description": "Allows you to specify a custom task executor for consuming messages.",
    "kind": "property",
    "datatype": "object",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "consumer (advanced)",
    "javaType": "org.springframework.core.task.TaskExecutor",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "testConnectionOnStartup",
    "description": "Specifies whether to test the connection on startup. This ensures that when Camel starts that all the JMS consumers have a valid connection to the JMS broker. If a connection cannot be granted then Camel throws an exception on startup. This ensures that Camel is not started with failed connections. The JMS producers is tested as well.",
    "kind": "property",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "common",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "timeToLive",
    "description": "When sending messages specifies the time-to-live of the message (in milliseconds).",
    "kind": "property",
    "datatype": "integer",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "producer",
    "javaType": "long",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "transacted",
    "description": "Specifies whether to use transacted mode",
    "kind": "property",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "transaction",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "transactionManager",
    "description": "The Spring transaction manager to use.",
    "kind": "property",
    "datatype": "object",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "transaction (advanced)",
    "javaType": "org.springframework.transaction.PlatformTransactionManager",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "transactionName",
    "description": "The name of the transaction to use.",
    "kind": "property",
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "transaction (advanced)",
    "javaType": "java.lang.String",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "transactionTimeout",
    "description": "The timeout value of the transaction (in seconds) if using transacted mode.",
    "kind": "property",
    "datatype": "integer",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "transaction (advanced)",
    "javaType": "int",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "transferException",
    "description": "If enabled and you are using Request Reply messaging (InOut) and an Exchange failed on the consumer side then the caused Exception will be send back in response as a javax.jms.ObjectMessage. If the client is Camel the returned Exception is rethrown. This allows you to use Camel JMS as a bridge in your routing - for example using persistent queues to enable robust routing. Notice that if you also have transferExchange enabled this option takes precedence. The caught exception is required to be serializable. The original Exception on the consumer side can be wrapped in an outer exception such as org.apache.camel.RuntimeCamelException when returned to the producer.",
    "kind": "property",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "advanced",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "transferExchange",
    "description": "You can transfer the exchange over the wire instead of just the body and headers. The following fields are transferred: In body Out body Fault body In headers Out headers Fault headers exchange properties exchange exception. This requires that the objects are serializable. Camel will exclude any non-serializable objects and log it at WARN level. You must enable this option on both the producer and consumer side so Camel knows the payloads is an Exchange and not a regular payload.",
    "kind": "property",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "advanced",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "transferFault",
    "description": "If enabled and you are using Request Reply messaging (InOut) and an Exchange failed with a SOAP fault (not exception) on the consumer side then the fault flag on link org.apache.camel.MessageisFault() will be send back in the response as a JMS header with the key link JmsConstantsJMS_TRANSFER_FAULT. If the client is Camel the returned fault flag will be set on the link org.apache.camel.MessagesetFault(boolean). You may want to enable this when using Camel components that support faults such as SOAP based such as cxf or spring-ws.",
    "kind": "property",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "advanced",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "useMessageIDAsCorrelationID",
    "description": "Specifies whether JMSMessageID should always be used as JMSCorrelationID for InOut messages.",
    "kind": "property",
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "advanced",
    "javaType": "boolean",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "username",
    "description": "Username to use with the ConnectionFactory. You can also configure username/password directly on the ConnectionFactory.",
    "kind": "property",
    "datatype": "password",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "security",
    "javaType": "java.lang.String",
    "isSecret": true,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "waitForProvisionCorrelationToBeUpdatedCounter",
    "description": "Number of times to wait for provisional correlation id to be updated to the actual correlation id when doing request/reply over JMS and when the option useMessageIDAsCorrelationID is enabled.",
    "kind": "property",
    "datatype": "integer",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "advanced",
    "javaType": "int",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "waitForProvisionCorrelationToBeUpdatedThreadSleepingTime",
    "description": "Interval in millis to sleep each time while waiting for provisional correlation id to be updated.",
    "kind": "property",
    "datatype": "integer",
    "isRequired": false,
    "isMultipleOk": false,
    "group": "advanced",
    "javaType": "long",
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  }
]
