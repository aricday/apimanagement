[
  {
    "name": "acks",
    "description": "The number of acknowledgments the producer requires the leader to have received before considering a request complete. This controls the durability of records that are sent. The following settings are allowed: acks=0 If set to zero then the producer will not wait for any acknowledgment from the server at all. The record will be immediately added to the socket buffer and considered sent. No guarantee can be made that the server has received the record in this case; and the retries configuration will not take effect (as the client won't generally know of any failures). The offset given back for each record will always be set to -1. acks=1 This will mean the leader will write the record to its local log but will respond without awaiting full acknowledgement from all followers. In this case should the leader fail immediately after acknowledging the record but before the followers have replicated it then the record will be lost. acks=all This means the leader will wait for the full set of in-sync replicas to acknowledge the record. This guarantees that the record will not be lost as long as at least one in-sync replica remains alive. This is the strongest available guarantee. This is equivalent to the acks=-1 setting.",
    "kind": null,
    "datatype": "string",
    "isRequired": true,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "all",
    "isDeprecated": false
  },
  {
    "name": "auto.commit.interval.ms",
    "description": "The frequency in milliseconds that the consumer offsets are auto-committed to Kafka if enable.auto.commit is set to true.",
    "kind": null,
    "datatype": "number",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "5000",
    "isDeprecated": false
  },
  {
    "name": "auto.offset.reset",
    "description": "What to do when there is no initial offset in Kafka or if the current offset does not exist any more on the server (e.g., because that data has been deleted):",
    "kind": null,
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "latest",
    "isDeprecated": false
  },
  {
    "name": "bootstrap.servers",
    "description": "A list of host/port pairs to use for establishing the initial connection to the Kafka cluster. The client will make use of all servers irrespective of which servers are specified here for bootstrappingâ€”this list only impacts the initial hosts used to discover the full set of servers. This list should be in the form host1:port1 [comma].... Since these servers are just used for the initial connection to discover the full cluster membership (which may change dynamically) this list need not contain the full set of servers (you may want more than one - in case a server is down).",
    "kind": null,
    "datatype": "string",
    "isRequired": true,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "localhost:9092",
    "isDeprecated": false
  },
  {
    "name": "check.crcs",
    "description": "Automatically check the CRC32 of the records consumed. This ensures no on-the-wire or on-disk corruption to the messages occurred. This check adds some overhead so it may be disabled in cases seeking extreme performance.",
    "kind": null,
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "true",
    "isDeprecated": false
  },
  {
    "name": "client.id",
    "description": "An id string to pass to the server when making requests. The purpose of this is to be able to track the source of requests beyond just ip/port by allowing a logical application name to be included in server-side request logging.",
    "kind": null,
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "",
    "isDeprecated": false
  },
  {
    "name": "compression.type",
    "description": "The compression type for all data generated by the producer. The default is none (i.e. no compression). Valid values are none  gzip  snappy  or lz4. Compression is of full batches of data  so the efficacy of batching will also impact the compression ratio (more batching means better compression).",
    "kind": null,
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "none",
    "isDeprecated": false
  },
  {
    "name": "connections.max.idle.ms",
    "description": "Close idle connections after the number of milliseconds specified by this config.",
    "kind": null,
    "datatype": "number",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "540000",
    "isDeprecated": false
  },
  {
    "name": "enable.auto.commit",
    "description": "If true the consumer's offset will be periodically committed in the background.",
    "kind": null,
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "true",
    "isDeprecated": false
  },
  {
    "name": "enable.idempotence",
    "description": "When set to true the producer will ensure that exactly one copy of each message is written in the stream. If false  producer retries due to broker failures  etc.  may write duplicates of the retried message in the stream. This is set to false by default. Note that enabling idempotence requires max.in.flight.requests.per.connection to be set to 1 and retries cannot be zero. Additionally acks must be set to all. If these values are left at their defaults  we will override the default to be suitable. If the values are set to something incompatible with the idempotent producer  a ConfigException will be thrown.",
    "kind": null,
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "false",
    "isDeprecated": false
  },
  {
    "name": "exclude.internal.topics",
    "description": "Whether records from internal topics (such as offsets) should be exposed to the consumer. If set to true the only way to receive records from an internal topic is subscribing to it.",
    "kind": null,
    "datatype": "boolean",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "true",
    "isDeprecated": false
  },
  {
    "name": "fetch.max.bytes",
    "description": "The maximum amount of data the server should return for a fetch request. Records are fetched in batches by the consumer and if the first record batch in the first non-empty partition of the fetch is larger than this value the record batch will still be returned to ensure that the consumer can make progress. As such this is not a absolute maximum. The maximum record batch size accepted by the broker is defined via message.max.bytes (broker config) or max.message.bytes (topic config). Note that the consumer performs multiple fetches in parallel.",
    "kind": null,
    "datatype": "number",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "52428800",
    "isDeprecated": false
  },
  {
    "name": "fetch.max.wait.ms",
    "description": "The maximum amount of time the server will block before answering the fetch request if there isn't sufficient data to immediately satisfy the requirement given by fetch.min.bytes.",
    "kind": null,
    "datatype": "number",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "500",
    "isDeprecated": false
  },
  {
    "name": "fetch.min.bytes",
    "description": "The minimum amount of data the server should return for a fetch request. If insufficient data is available the request will wait for that much data to accumulate before answering the request. The default setting of 1 byte means that fetch requests are answered as soon as a single byte of data is available or the fetch request times out waiting for data to arrive. Setting this to something greater than 1 will cause the server to wait for larger amounts of data to accumulate which can improve server throughput a bit at the cost of some additional latency.",
    "kind": null,
    "datatype": "number",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "1",
    "isDeprecated": false
  },
  {
    "name": "group.id",
    "description": "All consumer instances sharing the same group.id will be part of the same consumer group.",
    "kind": null,
    "datatype": "string",
    "isRequired": true,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "0",
    "isDeprecated": false
  },
  {
    "name": "heartbeat.interval.ms",
    "description": "The expected time between heartbeats to the consumer coordinator when using Kafka's group management facilities. Heartbeats are used to ensure that the consumer's session stays active and to facilitate rebalancing when new consumers join or leave the group. The value must be set lower than session.timeout.ms but typically should be set no higher than 1/3 of that value. It can be adjusted even lower to control the expected time for normal rebalances.",
    "kind": null,
    "datatype": "number",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "3000",
    "isDeprecated": false
  },
  {
    "name": "interceptor.classes",
    "description": "A list of classes to use as interceptors. Implementing the ConsumerInterceptor interface allows you to intercept (and possibly mutate) records received by the consumer. By default - there are no interceptors.",
    "kind": null,
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "isolation.level",
    "description": "Controls how to read messages written transactionally. If set to read_committed consumer.poll() will only return transactional messages which have been committed. If set to read_uncommitted (the default) consumer.poll() will return all messages even transactional messages which have been aborted. Non-transactional messages will be returned unconditionally in either mode.",
    "kind": null,
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "read_uncommitted",
    "isDeprecated": false
  },
  {
    "name": "key.deserializer",
    "description": "The deserializer settings specify how to turn bytes into objects. For example, by specifying string deserializers, we are saying that our records key and value will just be simple strings.",
    "kind": null,
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "org.apache.kafka.common.serialization.StringDeserializer",
    "isDeprecated": false
  },
  {
    "name": "key.serializer",
    "description": "String encoding defaults to UTF8 and can be customized by setting the property key.serializer.encoding.",
    "kind": null,
    "datatype": "string",
    "isRequired": true,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "org.apache.kafka.common.serialization.StringSerializer",
    "isDeprecated": false
  },
  {
    "name": "linger.ms",
    "description": "The producer groups together any records that arrive in between request transmissions into a single batched request. Normally this occurs only under load when records arrive faster than they can be sent out. However in some circumstances the client may want to reduce the number of requests even under moderate load. This setting accomplishes this by adding a small amount of artificial delayÃ³that is  rather than immediately sending out a record the producer will wait for up to the given delay to allow other records to be sent so that the sends can be batched together. This can be thought of as analogous to Nagle's algorithm in TCP. This setting gives the upper bound on the delay for batching: once we get batch.sizeworth of records for a partition it will be sent immediately regardless of this setting  however if we have fewer than this many bytes accumulated for this partition we will linger for the specified time waiting for more records to show up. This setting defaults to 0 (i.e. no delay). Setting linger.ms=5  for example  would have the effect of reducing the number of requests sent but would add up to 5ms of latency to records sent in the absense of load.",
    "kind": null,
    "datatype": "number",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "0",
    "isDeprecated": false
  },
  {
    "name": "max.block.ms",
    "description": "The configuration controls how long KafkaProducer.send()and KafkaProducer.partitionsFor() will block.These methods can be blocked either because the buffer is full or metadata unavailable.Blocking in the user-supplied serializers or partitioner will not be counted against this timeout.",
    "kind": null,
    "datatype": "number",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "60000",
    "isDeprecated": false
  },
  {
    "name": "max.in.flight.requests.per.connection",
    "description": "The maximum number of unacknowledged requests the client will send on a single connection before blocking. Note that if this setting is set to be greater than 1 and there are failed sends  there is a risk of message re-ordering due to retries (i.e.  if retries are enabled).",
    "kind": null,
    "datatype": "number",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "5",
    "isDeprecated": false
  },
  {
    "name": "max.partition.fetch.bytes",
    "description": "The maximum amount of data per-partition the server will return. Records are fetched in batches by the consumer. If the first record batch in the first non-empty partition of the fetch is larger than this limit the batch will still be returned to ensure that the consumer can make progress. The maximum record batch size accepted by the broker is defined via message.max.bytes(broker config) or max.message.bytes (topic config). See fetch.max.bytes for limiting the consumer request size.",
    "kind": null,
    "datatype": "number",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "1048576",
    "isDeprecated": false
  },
  {
    "name": "max.poll.interval.ms",
    "description": "The maximum delay between invocations of poll() when using consumer group management. This places an upper bound on the amount of time that the consumer can be idle before fetching more records. If poll() is not called before expiration of this timeout then the consumer is considered failed and the group will rebalance in order to reassign the partitions to another member.",
    "kind": null,
    "datatype": "number",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "300000",
    "isDeprecated": false
  },
  {
    "name": "max.poll.records",
    "description": "The maximum number of records returned in a single call to poll().",
    "kind": null,
    "datatype": "number",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "500",
    "isDeprecated": false
  },
  {
    "name": "max.request.size",
    "description": "The maximum size of a request in bytes. This setting will limit the number of record batches the producer will send in a single request to avoid sending huge requests. This is also effectively a cap on the maximum record batch size. Note that the server has its own cap on record batch size which may be different from this.",
    "kind": null,
    "datatype": "number",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "1048576",
    "isDeprecated": false
  },
  {
    "name": "metadata.max.age.ms",
    "description": "The period of time in milliseconds after which we force a refresh of metadata even if we haven't seen any partition leadership changes to proactively discover any new brokers or partitions.",
    "kind": null,
    "datatype": "number",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "300000",
    "isDeprecated": false
  },
  {
    "name": "metric.reporters",
    "description": "A list of classes to use as metrics reporters. Implementing the MetricReporter interface allows plugging in classes that will be notified of new metric creation. The JmxReporter is always included to register JMX statistics.",
    "kind": null,
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "",
    "isDeprecated": false
  },
  {
    "name": "metrics.num.samples",
    "description": "The number of samples maintained to compute metrics",
    "kind": null,
    "datatype": "number",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "2",
    "isDeprecated": false
  },
  {
    "name": "metrics.recording.level",
    "description": "The highest recording level for metrics.",
    "kind": null,
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "INFO",
    "isDeprecated": false
  },
  {
    "name": "metrics.sample.window.ms",
    "description": "The window of time a metrics sample is computed over.",
    "kind": null,
    "datatype": "number",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "30000",
    "isDeprecated": false
  },
  {
    "name": "partition.assignment.strategy",
    "description": "The class name of the partition assignment strategy that the client will use to distribute partition ownership amongst consumer instances when group management is used",
    "kind": null,
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "class org.apache.kafka.clients.consumer.RangeAssignor",
    "isDeprecated": false
  },
  {
    "name": "partitioner.class",
    "description": "Partitioner class that implements the Partitioner interface.",
    "kind": null,
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "org.apache.kafka.clients.producer.internals.DefaultPartitioner",
    "isDeprecated": false
  },
  {
    "name": "receive.buffer.bytes",
    "description": "The size of the TCP receive buffer (SO_RCVBUF) to use when reading data. If the value is -1 the OS default will be used.",
    "kind": null,
    "datatype": "number",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "65536",
    "isDeprecated": false
  },
  {
    "name": "reconnect.backoff.max.ms",
    "description": "The maximum amount of time in milliseconds to wait when reconnectng to a broker that has repeatedly failed to connect. If provided the backoff per host will increase exponentially for each consecutive connection failure  up to this maximum. After calculating the backoff increase 20% random jitter is added to avoid connection storms.",
    "kind": null,
    "datatype": "number",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "1000",
    "isDeprecated": false
  },
  {
    "name": "reconnect.backoff.ms",
    "description": "The base amount of time to wait before attempting to reconnect to a given host. This avoids repeatedly connecting to a host in a tight loop. This backoff applies to all connection attempts by the client to a broker.",
    "kind": null,
    "datatype": "number",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "50",
    "isDeprecated": false
  },
  {
    "name": "request.timeout.ms",
    "description": "The configuration controls the maximum amount of time the client will wait for the response of a request. If the response is not received before the timeout elapses the client will resend the request if necessary or fail the request if retries are exhausted.",
    "kind": null,
    "datatype": "number",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "305000",
    "isDeprecated": false
  },
  {
    "name": "retries",
    "description": "Setting a value greater than zero will cause the client to resend any record whose send fails with a potentially transient error. Note that this retry is no different than if the client resent the record upon receiving the error. Allowing retries without setting max.in.flight.requests.per.connection to 1 will potentially change the ordering of records because if two batches are sent to a single partition  and the first fails and is retried but the second succeeds  then the records in the second batch may appear first.",
    "kind": null,
    "datatype": "number",
    "isRequired": true,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "0",
    "isDeprecated": false
  },
  {
    "name": "retry.backoff.ms",
    "description": "The amount of time to wait before attempting to retry a failed request to a given topic partition. This avoids repeatedly sending requests in a tight loop under some failure scenarios.",
    "kind": null,
    "datatype": "number",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "100",
    "isDeprecated": false
  },
  {
    "name": "sasl.jaas.config",
    "description": "JAAS login context parameters for SASL connections in the format used by JAAS configuration files. JAAS configuration file format is described here. The format for the value is:  (=)*;",
    "kind": null,
    "datatype": "password",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "sasl.kerberos.kinit.cmd",
    "description": "Kerberos kinit command path.",
    "kind": null,
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "/usr/bin/kinit",
    "isDeprecated": false
  },
  {
    "name": "sasl.kerberos.min.time.before.relogin",
    "description": "Login thread sleep time between refresh attempts.",
    "kind": null,
    "datatype": "number",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "60000",
    "isDeprecated": false
  },
  {
    "name": "sasl.kerberos.service.name",
    "description": "The Kerberos principal name that Kafka runs as. This can be defined either in Kafka's JAAS config or in Kafka's config.",
    "kind": null,
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "sasl.kerberos.ticket.renew.jitter",
    "description": "Percentage of random jitter added to the renewal time.",
    "kind": null,
    "datatype": "number",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "0.05",
    "isDeprecated": false
  },
  {
    "name": "sasl.kerberos.ticket.renew.window.factor",
    "description": "Login thread will sleep until the specified window factor of time from last refresh to ticket's expiry has been reached at which time it will try to renew the ticket.",
    "kind": null,
    "datatype": "number",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "0.8",
    "isDeprecated": false
  },
  {
    "name": "sasl.mechanism",
    "description": "SASL mechanism used for client connections. This may be any mechanism for which a security provider is available. GSSAPI is the default mechanism.",
    "kind": null,
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "GSSAPI",
    "isDeprecated": false
  },
  {
    "name": "security.protocol",
    "description": "Protocol used to communicate with brokers. Valid values are: PLAINTEXT SSL - SASL_PLAINTEXT - SASL_SSL.",
    "kind": null,
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "PLAINTEXT",
    "isDeprecated": false
  },
  {
    "name": "send.buffer.bytes",
    "description": "The size of the TCP send buffer (SO_SNDBUF) to use when sending data. If the value is -1 the OS default will be used.",
    "kind": null,
    "datatype": "number",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "131072",
    "isDeprecated": false
  },
  {
    "name": "session.timeout.ms",
    "description": "The timeout used to detect consumer failures when using Kafka's group management facility. The consumer sends periodic heartbeats to indicate its liveness to the broker. If no heartbeats are received by the broker before the expiration of this session timeout then the broker will remove this consumer from the group and initiate a rebalance. Note that the value must be in the allowable range as configured in the broker configuration by group.min.session.timeout.ms and group.max.session.timeout.ms.",
    "kind": null,
    "datatype": "number",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "10000",
    "isDeprecated": false
  },
  {
    "name": "ssl.cipher.suites",
    "description": "A list of cipher suites. This is a named combination of authentication - encryption - MAC and key exchange algorithm used to negotiate the security settings for a network connection using TLS or SSL network protocol. By default all the available cipher suites are supported.",
    "kind": null,
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "ssl.enabled.protocols",
    "description": "The list of protocols enabled for SSL connections.",
    "kind": null,
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "TLSv1.2 TLSv1.1 TLSv1",
    "isDeprecated": false
  },
  {
    "name": "ssl.endpoint.identification.algorithm",
    "description": "The endpoint identification algorithm to validate server hostname using server certificate.",
    "kind": null,
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "ssl.key.password",
    "description": "The password of the private key in the key store file. This is optional for client.",
    "kind": null,
    "datatype": "password",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "ssl.keymanager.algorithm",
    "description": "The algorithm used by key manager factory for SSL connections. Default value is the key manager factory algorithm configured for the Java Virtual Machine.",
    "kind": null,
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "SunX509",
    "isDeprecated": false
  },
  {
    "name": "ssl.keystore.location",
    "description": "The location of the key store file. This is optional for client and can be used for two-way authentication for client.",
    "kind": null,
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "ssl.keystore.password",
    "description": "The store password for the key store file. This is optional for client and only needed if ssl.keystore.location is configured.",
    "kind": null,
    "datatype": "password",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "ssl.keystore.type",
    "description": "The file format of the key store file. This is optional for client.",
    "kind": null,
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "JKS",
    "isDeprecated": false
  },
  {
    "name": "ssl.protocol",
    "description": "The SSL protocol used to generate the SSLContext. Default setting is TLS which is fine for most cases. Allowed values in recent JVMs are TLS TLSv1.1 and TLSv1.2. SSL SSLv2 and SSLv3 may be supported in older JVMs but their usage is discouraged due to known security vulnerabilities.",
    "kind": null,
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "TLS",
    "isDeprecated": false
  },
  {
    "name": "ssl.provider",
    "description": "The name of the security provider used for SSL connections. Default value is the default security provider of the JVM.",
    "kind": null,
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "ssl.secure.random.implementation",
    "description": "The SecureRandom PRNG implementation to use for SSL cryptography operations.",
    "kind": null,
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "ssl.trustmanager.algorithm",
    "description": "The algorithm used by trust manager factory for SSL connections. Default value is the trust manager factory algorithm configured for the Java Virtual Machine.",
    "kind": null,
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "PKIX",
    "isDeprecated": false
  },
  {
    "name": "ssl.truststore.location",
    "description": "The location of the trust store file.",
    "kind": null,
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "ssl.truststore.password",
    "description": "The password for the trust store file. If a password is not set access to the truststore is still available but integrity checking is disabled.",
    "kind": null,
    "datatype": "password",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "ssl.truststore.type",
    "description": "The file format of the trust store file.",
    "kind": null,
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "JKS",
    "isDeprecated": false
  },
  {
    "name": "transaction.timeout.ms",
    "description": "The maximum amount of time in ms that the transaction coordinator will wait for a transaction status update from the producer before proactively aborting the ongoing transaction.If this value is larger than the max.transaction.timeout.ms setting in the broker  the request will fail with a `InvalidTransactionTimeout` error.",
    "kind": null,
    "datatype": "number",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "60000",
    "isDeprecated": false
  },
  {
    "name": "transactional.id",
    "description": "The TransactionalId to use for transactional delivery. This enables reliability semantics which span multiple producer sessions since it allows the client to guarantee that transactions using the same TransactionalId have been completed prior to starting any new transactions. If no TransactionalId is provided  then the producer is limited to idempotent delivery. Note that enable.idempotence must be enabled if a TransactionalId is configured. The default is empty which means transactions cannot be used.",
    "kind": null,
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": null,
    "isDeprecated": false
  },
  {
    "name": "value.deserializer",
    "description": "String encoding defaults to UTF8 and can be customized by setting the property value.deserializer.encoding",
    "kind": null,
    "datatype": "string",
    "isRequired": false,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "org.apache.kafka.common.serialization.StringDeserializer",
    "isDeprecated": false
  },
  {
    "name": "value.serializer",
    "description": "String encoding defaults to UTF8 and can be customized by setting the property value.serializer.encoding.",
    "kind": null,
    "datatype": "string",
    "isRequired": true,
    "isMultipleOk": false,
    "group": null,
    "javaType": null,
    "isSecret": false,
    "defaultValue": "org.apache.kafka.common.serialization.StringSerializer",
    "isDeprecated": false
  }
]
