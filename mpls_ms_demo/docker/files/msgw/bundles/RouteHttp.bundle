<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<l7:Bundle xmlns:l7="http://ns.l7tech.com/2010/04/gateway-management">
    <l7:References>
        <l7:Item>
            <l7:Name>SSL</l7:Name>
            <l7:Id>00000000000000000000000000000002:SSL</l7:Id>
            <l7:Type>SSG_KEY_ENTRY</l7:Type>
            <l7:TimeStamp>2017-07-07T14:32:30.320Z</l7:TimeStamp>
            <l7:Resource>
                <l7:PrivateKey alias="SSL" id="00000000000000000000000000000002:SSL" keystoreId="00000000000000000000000000000002">
                    <l7:CertificateChain>
                        <l7:CertificateData>
                            <l7:IssuerName>CN=msgw.docker.local</l7:IssuerName>
                            <l7:SerialNumber>15803386095993783947</l7:SerialNumber>
                            <l7:SubjectName>CN=msgw.docker.local</l7:SubjectName>
                            <l7:Encoded>MIIFKTCCAxGgAwIBAgIJANtQ5+ykDoaLMA0GCSqGSIb3DQEBBQUAMBwxGjAYBgNVBAMMEW1zZ3cuZG9ja2VyLmxvY2FsMB4XDTE3MDYxNDE5MDg0MFoXDTE5MDYxNDE5MDg0MFowHDEaMBgGA1UEAwwRbXNndy5kb2NrZXIubG9jYWwwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCwzFWJeGaHHRWJHhKYqp5HQ/jtF+zJrpMnP5vSEK+zfW8mns0s1A0own+IkJvcPzYPN2424f/2i4CHW6JQpXu97JBcGphzzw0xvIXkq438UFhm1WvtWqJkP9jinvma59JRuPg2oUsDBBkzW849OLjmCnGwdpjW6/szy2d/s3JCmik8R4G/xX9/O6x2Vios/iDQHFmSIJrOk5JiB53t/juHRu/5IyGR7p5oGlVwq4aXjhmET2zfbYLIOFZzjJS/PqxTNCWD/cVwYnPcaih+eMyzxQIqJXxaYKBqjzdcaY3Cvfw9qk0carY+ebh9gGzt6Uei1B+kJpDg6twVDiIypIJTU2FfyJVHyz8wijGS0gGKryOwOLOH3ve7jsp132R/CTVfZxEfR63hZ7MFo+gryebyH1USGCXuWy+QaFpSNAtY7ycRDScPsPVkzg2LwEFb8BEzv7ALjXdZRTfILL78wqUjLSvEqU/kwwlY3iQD6ncQQhFmfzgBcBvhe9mVLPy6NnjvllYjGoHW0pbSpzKmlRDVGu4YRsCdHEcFp15r+BsYrfCZ+K3N/MHgPUT+qeyMEmURU1HqyhU1j23TCpu1btD+DV6Da6GehnAG0d3UPv1MrFyCIwTSOjs1Sz54hHasCquRbiwmFbbusTMCHSItufc45TyxgF8EXdK0klj8uV5CzQIDAQABo24wbDAcBgNVHREEFTATghFtc2d3LmRvY2tlci5sb2NhbDAdBgNVHQ4EFgQUTdzsoJlJAgnRXIvFDbLUzo146EIwHwYDVR0jBBgwFoAUTdzsoJlJAgnRXIvFDbLUzo146EIwDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQUFAAOCAgEAjWR6IZ/dHuMWIpJH+wZV3rIF632SDfdzxKBqESr5CrkqvH2+dLynW/qsP5vrNWGG2SX3NUms/FOljY5Pfn2TekKUmyh2Yns1PFZ+GvNibvCq6OPyog/E2kr5psWOs2Nq5WlTE3XPvTFtVrUpoPQiJca+DUpUZ1wV7nQJyJ8EbGz79yrzhQIB3sKJ2SELUYPG9+G3BJ0VtjcYQydj662ilByPzu2X45f1rJxQWX661URqLMDJlQEpl6yJOBslkivjJCHtOd88ltlgx5PA7ljn2NoStVHj8fC70N57p8NJffyJZJDTdJl5Yv/6yHJhS1LrVQ8sQBPLH6ij2Sz7AONtBdxwEdhXrdu00q238aNd42+te9nuczN9XGwnW0FxQUctPo5eBMPOY6XZ3rtAOZ1yPF+diGoSkw8pnn91b3XeDLZ2ryWwluJ4Y7ra7wmxarM5BO07Lbu9bifHoEaYWX8Ctf3tkCEB+f+LxWSGZvaKl4fWycSHRnV+iUTYyHd4bZTpu7H0Kf7Cu5Qz4xDyYJwNM9L17gh17Y7TKabTZ1WHv3s2asTSch0U6wlCTG9851f1eqC0FUAbEH6FuSzlGaYxgvLAErZIDv6EkY1RKfqTCQgHTckNlwRvK8YV+5/9nHLzXiuAezM5lNocl3xgiHft1MY/UcDkBo62niFohoz3s8o=</l7:Encoded>
                        </l7:CertificateData>
                    </l7:CertificateChain>
                    <l7:Properties>
                        <l7:Property key="keyAlgorithm">
                            <l7:StringValue>RSA</l7:StringValue>
                        </l7:Property>
                        <l7:Property key="keyData">
                            <l7:StringValue algorithm="RSA" bundleKey="$L7C2$1bead,AcgHBefgOPzx9I16lQoXGhen/uXh2ar6TPUfV1eetyU=$jMVnyKVJdj5+NX4gzaHly0f0WDv6BBXUL/4cxe5Mq9OO5Eh9pzuvx4Ol9gYP0rMXxvYwChaZO/DAKuDIrT9NaWDBMD0yKTyXUxcRjq8gT99VMhoKWjvC2ZiAbfyWQgxD">$L7C2$1,y2a240rg2IbxiY3AhHjosufyZe2+Q3f48XM25eMalF4=$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</l7:StringValue>
                        </l7:Property>
                        <l7:Property key="specialPurposes">
                            <l7:StringValue>Default SSL Key</l7:StringValue>
                        </l7:Property>
                    </l7:Properties>
                </l7:PrivateKey>
            </l7:Resource>
        </l7:Item>
        <l7:Item>
            <l7:Name>RouteHttp</l7:Name>
            <l7:Id>acac82df78079fc9b90ecda997d1ebd1</l7:Id>
            <l7:Type>POLICY</l7:Type>
            <l7:TimeStamp>2017-07-07T14:32:30.361Z</l7:TimeStamp>
            <l7:Resource>
                <l7:Policy guid="912af9a7-6d36-42d4-937c-369320448dd9" id="acac82df78079fc9b90ecda997d1ebd1" version="6">
                    <l7:PolicyDetail folderId="2a97ddf9a6e77162832b9c27bc8f57e0" guid="912af9a7-6d36-42d4-937c-369320448dd9" id="acac82df78079fc9b90ecda997d1ebd1" version="6">
                        <l7:Name>RouteHttp</l7:Name>
                        <l7:PolicyType>Include</l7:PolicyType>
                        <l7:Properties>
                            <l7:Property key="revision">
                                <l7:LongValue>7</l7:LongValue>
                            </l7:Property>
                            <l7:Property key="soap">
                                <l7:BooleanValue>false</l7:BooleanValue>
                            </l7:Property>
                        </l7:Properties>
                    </l7:PolicyDetail>
                    <l7:Resources>
                        <l7:ResourceSet tag="policy">
                            <l7:Resource type="policy">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;wsp:Policy xmlns:L7p="http://www.layer7tech.com/ws/policy" xmlns:wsp="http://schemas.xmlsoap.org/ws/2002/12/policy"&gt;
    &lt;wsp:All wsp:Usage="Required"&gt;
        &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;L7p:ComparisonAssertion&gt;
                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                    &lt;L7p:Expression1 stringValue="${useAuthenticationHeader}"/&gt;
                    &lt;L7p:Operator operatorNull="null"/&gt;
                    &lt;L7p:Predicates predicates="included"&gt;
                        &lt;L7p:item dataType="included"&gt;
                            &lt;L7p:Type variableDataType="string"/&gt;
                        &lt;/L7p:item&gt;
                        &lt;L7p:item binary="included"&gt;
                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                            &lt;L7p:RightValue stringValue="jwt"/&gt;
                        &lt;/L7p:item&gt;
                    &lt;/L7p:Predicates&gt;
                &lt;/L7p:ComparisonAssertion&gt;
                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                    &lt;wsp:All wsp:Usage="Required"&gt;
                        &lt;L7p:ComparisonAssertion&gt;
                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                            &lt;L7p:Expression1 stringValue="${access_token}"/&gt;
                            &lt;L7p:Operator operatorNull="null"/&gt;
                            &lt;L7p:Predicates predicates="included"&gt;
                                &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="string"/&gt;
                                &lt;/L7p:item&gt;
                                &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:Operator operator="EMPTY"/&gt;
                                    &lt;L7p:RightValue stringValue="jwt"/&gt;
                                &lt;/L7p:item&gt;
                            &lt;/L7p:Predicates&gt;
                        &lt;/L7p:ComparisonAssertion&gt;
                        &lt;L7p:SetVariable&gt;
                            &lt;L7p:AssertionComment assertionComment="included"&gt;
                                &lt;L7p:Properties mapValue="included"&gt;
                                    &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="Token information if RequireOauth2Token encapsulated assertion is used"/&gt;
                                    &lt;/L7p:entry&gt;
                                &lt;/L7p:Properties&gt;
                            &lt;/L7p:AssertionComment&gt;
                            &lt;L7p:Base64Expression stringValue="ew0KCSJzZXNzaW9uLmV4cGlyZXNfYXQiOiIke3Nlc3Npb24uZXhwaXJlc19hdH0iLA0KCSJzZXNzaW9uLmNsaWVudF9pZCI6IiR7c2Vzc2lvbi5jbGllbnRfaWR9IiwNCgkic2Vzc2lvbi5jdXN0b20iOiR7c2Vzc2lvbi5jdXN0b219LA0KCSJzZXNzaW9uLnN1YnNjcmliZXJfaWQiOiIke3Nlc3Npb24uc3Vic2NyaWJlcl9pZH0iLA0KCSJzZXNzaW9uLnNjb3BlIjoiJHtzZXNzaW9uLnNjb3BlfSINCn0="/&gt;
                            &lt;L7p:VariableToSet stringValue="token_info"/&gt;
                        &lt;/L7p:SetVariable&gt;
                        &lt;L7p:SetVariable&gt;
                            &lt;L7p:AssertionComment assertionComment="included"&gt;
                                &lt;L7p:Properties mapValue="included"&gt;
                                    &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="Token information if RequireOauth2Token encapsulated assertion is used"/&gt;
                                    &lt;/L7p:entry&gt;
                                &lt;/L7p:Properties&gt;
                            &lt;/L7p:AssertionComment&gt;
                            &lt;L7p:Base64Expression stringValue="IiR7c2Vzc2lvbi5zY29wZX0i"/&gt;
                            &lt;L7p:VariableToSet stringValue="scp"/&gt;
                        &lt;/L7p:SetVariable&gt;
                    &lt;/wsp:All&gt;
                    &lt;wsp:All wsp:Usage="Required"&gt;
                        &lt;L7p:SetVariable&gt;
                            &lt;L7p:AssertionComment assertionComment="included"&gt;
                                &lt;L7p:Properties mapValue="included"&gt;
                                    &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="Token information if RequireOauth2Token encapsulated assertion is used"/&gt;
                                    &lt;/L7p:entry&gt;
                                &lt;/L7p:Properties&gt;
                            &lt;/L7p:AssertionComment&gt;
                            &lt;L7p:Base64Expression stringValue="IiI="/&gt;
                            &lt;L7p:VariableToSet stringValue="token_info"/&gt;
                        &lt;/L7p:SetVariable&gt;
                        &lt;L7p:SetVariable&gt;
                            &lt;L7p:AssertionComment assertionComment="included"&gt;
                                &lt;L7p:Properties mapValue="included"&gt;
                                    &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="Token information if RequireOauth2Token encapsulated assertion is used"/&gt;
                                    &lt;/L7p:entry&gt;
                                &lt;/L7p:Properties&gt;
                            &lt;/L7p:AssertionComment&gt;
                            &lt;L7p:Base64Expression stringValue="IiI="/&gt;
                            &lt;L7p:VariableToSet stringValue="scp"/&gt;
                        &lt;/L7p:SetVariable&gt;
                    &lt;/wsp:All&gt;
                &lt;/wsp:OneOrMore&gt;
                &lt;L7p:UUIDGenerator&gt;
                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="Add JWT unique ID"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:AssertionComment&gt;
                    &lt;L7p:MaximumQuantity intValue="1"/&gt;
                    &lt;L7p:TargetVariable stringValue="jti"/&gt;
                &lt;/L7p:UUIDGenerator&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="JHtnYXRld2F5LnRpbWUudXRjfQ=="/&gt;
                    &lt;L7p:DataType variableDataType="dateTime"/&gt;
                    &lt;L7p:DateOffsetExpression stringValue=""/&gt;
                    &lt;L7p:VariableToSet stringValue="time_now"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="JHtnYXRld2F5LnRpbWUudXRjfQ=="/&gt;
                    &lt;L7p:DataType variableDataType="dateTime"/&gt;
                    &lt;L7p:DateOffsetExpression stringValue="5"/&gt;
                    &lt;L7p:VariableToSet stringValue="time_now_plus_5s"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="CA JWT including default information following the RFC 7519 guide. Also include placeholder for otk token_info"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:AssertionComment&gt;
                    &lt;L7p:Base64Expression stringValue="ew0KICAgICJpc3MiIDogIiR7c3Nnbm9kZS5ob3N0bmFtZX0iLA0KICAgICJzdWIiIDogImZyb20gZ3c0bXMiLA0KICAgICJhdWQiIDogIiR7dGFyZ2V0VXJsfSIsDQogICAgImV4cCIgOiAiJHt0aW1lX25vd19wbHVzXzVzLnNlY29uZHN9IiwNCiAgICAiaWF0IiA6ICIke3RpbWVfbm93LnNlY29uZHN9IiwNCiAgICAianRpIiA6ICIke2p0aX0iLA0KICAgICJzY3AiIDogWyR7c2NwfV0sDQogICAgImNhX290ayIgOiAke3Rva2VuX2luZm99DQp9"/&gt;
                    &lt;L7p:VariableToSet stringValue="ca_jwt"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:EncodeJsonWebToken&gt;
                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="signed ca_jwt with default ssl key"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:AssertionComment&gt;
                    &lt;L7p:HeaderAction stringValue="Merge to Generated Header"/&gt;
                    &lt;L7p:KeyGoid goidValue="0000000000000000ffffffffffffffff"/&gt;
                    &lt;L7p:SignPayload booleanValue="true"/&gt;
                    &lt;L7p:SignatureAlgorithm stringValue="RS256"/&gt;
                    &lt;L7p:SignatureSourceType intValue="1"/&gt;
                    &lt;L7p:SourceHeaders stringValue="{&amp;quot;kid&amp;quot; : &amp;quot;5936f350-93ec-4d66-8396-b2e9c2ec79af&amp;quot;}"/&gt;
                    &lt;L7p:SourceVariable stringValue="${ca_jwt}"/&gt;
                    &lt;L7p:TargetVariable stringValue="signed_ca_jwt"/&gt;
                &lt;/L7p:EncodeJsonWebToken&gt;
                &lt;L7p:AddHeader&gt;
                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="Add signed jwt in http header "/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:AssertionComment&gt;
                    &lt;L7p:HeaderName stringValue="x-ca-jwt"/&gt;
                    &lt;L7p:HeaderValue stringValue="${signed_ca_jwt.compact}"/&gt;
                &lt;/L7p:AddHeader&gt;
                &lt;L7p:assertionComment&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="use_authentication_header = jwt"/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:assertionComment&gt;
            &lt;/wsp:All&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;L7p:ComparisonAssertion&gt;
                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                    &lt;L7p:Expression1 stringValue="${useAuthenticationHeader}"/&gt;
                    &lt;L7p:Operator operatorNull="null"/&gt;
                    &lt;L7p:Predicates predicates="included"&gt;
                        &lt;L7p:item dataType="included"&gt;
                            &lt;L7p:Type variableDataType="string"/&gt;
                        &lt;/L7p:item&gt;
                        &lt;L7p:item binary="included"&gt;
                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                            &lt;L7p:RightValue stringValue="plaintextheader"/&gt;
                        &lt;/L7p:item&gt;
                    &lt;/L7p:Predicates&gt;
                &lt;/L7p:ComparisonAssertion&gt;
                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                    &lt;wsp:All wsp:Usage="Required"&gt;
                        &lt;L7p:ComparisonAssertion&gt;
                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                            &lt;L7p:Expression1 stringValue="${session.subscriber_id}"/&gt;
                            &lt;L7p:Operator operatorNull="null"/&gt;
                            &lt;L7p:Predicates predicates="included"&gt;
                                &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="string"/&gt;
                                &lt;/L7p:item&gt;
                                &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:Operator operator="EMPTY"/&gt;
                                    &lt;L7p:RightValue stringValue="plaintextheader"/&gt;
                                &lt;/L7p:item&gt;
                            &lt;/L7p:Predicates&gt;
                        &lt;/L7p:ComparisonAssertion&gt;
                        &lt;L7p:AddHeader&gt;
                            &lt;L7p:AssertionComment assertionComment="included"&gt;
                                &lt;L7p:Properties mapValue="included"&gt;
                                    &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="Add signed jwt in http header "/&gt;
                                    &lt;/L7p:entry&gt;
                                &lt;/L7p:Properties&gt;
                            &lt;/L7p:AssertionComment&gt;
                            &lt;L7p:HeaderName stringValue="x-ca-subscriber-id"/&gt;
                            &lt;L7p:HeaderValue stringValue="${session.subscriber_id}"/&gt;
                        &lt;/L7p:AddHeader&gt;
                    &lt;/wsp:All&gt;
                    &lt;L7p:TrueAssertion/&gt;
                &lt;/wsp:OneOrMore&gt;
                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                    &lt;wsp:All wsp:Usage="Required"&gt;
                        &lt;L7p:ComparisonAssertion&gt;
                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                            &lt;L7p:Expression1 stringValue="${session.client_id}"/&gt;
                            &lt;L7p:Operator operatorNull="null"/&gt;
                            &lt;L7p:Predicates predicates="included"&gt;
                                &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="string"/&gt;
                                &lt;/L7p:item&gt;
                                &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:Operator operator="EMPTY"/&gt;
                                    &lt;L7p:RightValue stringValue="plaintextheader"/&gt;
                                &lt;/L7p:item&gt;
                            &lt;/L7p:Predicates&gt;
                        &lt;/L7p:ComparisonAssertion&gt;
                        &lt;L7p:AddHeader&gt;
                            &lt;L7p:AssertionComment assertionComment="included"&gt;
                                &lt;L7p:Properties mapValue="included"&gt;
                                    &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="Add signed jwt in http header "/&gt;
                                    &lt;/L7p:entry&gt;
                                &lt;/L7p:Properties&gt;
                            &lt;/L7p:AssertionComment&gt;
                            &lt;L7p:HeaderName stringValue="x-ca-client-id"/&gt;
                            &lt;L7p:HeaderValue stringValue="${session.client_id}"/&gt;
                        &lt;/L7p:AddHeader&gt;
                    &lt;/wsp:All&gt;
                    &lt;L7p:TrueAssertion/&gt;
                &lt;/wsp:OneOrMore&gt;
                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                    &lt;wsp:All wsp:Usage="Required"&gt;
                        &lt;L7p:ComparisonAssertion&gt;
                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                            &lt;L7p:Expression1 stringValue="${session.scope}"/&gt;
                            &lt;L7p:Operator operatorNull="null"/&gt;
                            &lt;L7p:Predicates predicates="included"&gt;
                                &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="string"/&gt;
                                &lt;/L7p:item&gt;
                                &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:Operator operator="EMPTY"/&gt;
                                    &lt;L7p:RightValue stringValue="plaintextheader"/&gt;
                                &lt;/L7p:item&gt;
                            &lt;/L7p:Predicates&gt;
                        &lt;/L7p:ComparisonAssertion&gt;
                        &lt;L7p:AddHeader&gt;
                            &lt;L7p:AssertionComment assertionComment="included"&gt;
                                &lt;L7p:Properties mapValue="included"&gt;
                                    &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="Add signed jwt in http header "/&gt;
                                    &lt;/L7p:entry&gt;
                                &lt;/L7p:Properties&gt;
                            &lt;/L7p:AssertionComment&gt;
                            &lt;L7p:HeaderName stringValue="x-ca-scope"/&gt;
                            &lt;L7p:HeaderValue stringValue="${session.scope}"/&gt;
                        &lt;/L7p:AddHeader&gt;
                    &lt;/wsp:All&gt;
                    &lt;L7p:TrueAssertion/&gt;
                &lt;/wsp:OneOrMore&gt;
                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                    &lt;wsp:All wsp:Usage="Required"&gt;
                        &lt;L7p:ComparisonAssertion&gt;
                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                            &lt;L7p:Expression1 stringValue="${session.custom}"/&gt;
                            &lt;L7p:Operator operatorNull="null"/&gt;
                            &lt;L7p:Predicates predicates="included"&gt;
                                &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="string"/&gt;
                                &lt;/L7p:item&gt;
                                &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:Operator operator="EMPTY"/&gt;
                                    &lt;L7p:RightValue stringValue="plaintextheader"/&gt;
                                &lt;/L7p:item&gt;
                            &lt;/L7p:Predicates&gt;
                        &lt;/L7p:ComparisonAssertion&gt;
                        &lt;L7p:AddHeader&gt;
                            &lt;L7p:AssertionComment assertionComment="included"&gt;
                                &lt;L7p:Properties mapValue="included"&gt;
                                    &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="Add signed jwt in http header "/&gt;
                                    &lt;/L7p:entry&gt;
                                &lt;/L7p:Properties&gt;
                            &lt;/L7p:AssertionComment&gt;
                            &lt;L7p:HeaderName stringValue="x-ca-custom"/&gt;
                            &lt;L7p:HeaderValue stringValue="${session.custom}"/&gt;
                        &lt;/L7p:AddHeader&gt;
                    &lt;/wsp:All&gt;
                    &lt;L7p:TrueAssertion/&gt;
                &lt;/wsp:OneOrMore&gt;
                &lt;L7p:assertionComment&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="placeholder for plaintext header to pass the token info (user info and scope)"/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:assertionComment&gt;
            &lt;/wsp:All&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;L7p:ComparisonAssertion&gt;
                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                    &lt;L7p:Expression1 stringValue="${useAuthenticationHeader}"/&gt;
                    &lt;L7p:Operator operatorNull="null"/&gt;
                    &lt;L7p:Predicates predicates="included"&gt;
                        &lt;L7p:item dataType="included"&gt;
                            &lt;L7p:Type variableDataType="string"/&gt;
                        &lt;/L7p:item&gt;
                        &lt;L7p:item binary="included"&gt;
                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                            &lt;L7p:Operator operator="EMPTY"/&gt;
                            &lt;L7p:RightValue stringValue="null"/&gt;
                        &lt;/L7p:item&gt;
                    &lt;/L7p:Predicates&gt;
                &lt;/L7p:ComparisonAssertion&gt;
                &lt;L7p:assertionComment&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="use_authentication_headeris not specified (empty)"/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:assertionComment&gt;
            &lt;/wsp:All&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;L7p:CustomizeErrorResponse&gt;
                    &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
   "error": "invalid useAuthenticationHeader input"
}]]&gt;&lt;/L7p:Content&gt;
                    &lt;L7p:ContentType stringValue="application/json; charset=UTF-8"/&gt;
                    &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                &lt;/L7p:CustomizeErrorResponse&gt;
                &lt;L7p:RaiseError&gt;
                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="When use_authentication_header is not &amp;quot;jwt&amp;quot; and it is not empty. "/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:AssertionComment&gt;
                &lt;/L7p:RaiseError&gt;
                &lt;L7p:assertionComment&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="use_authentication_header is not empty and is not &amp;quot;jwt&amp;quot;. Not supported "/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:assertionComment&gt;
            &lt;/wsp:All&gt;
            &lt;L7p:assertionComment&gt;
                &lt;L7p:Properties mapValue="included"&gt;
                    &lt;L7p:entry&gt;
                        &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                        &lt;L7p:value stringValue="Handles extra header. Currently only JWT is supported"/&gt;
                    &lt;/L7p:entry&gt;
                &lt;/L7p:Properties&gt;
            &lt;/L7p:assertionComment&gt;
        &lt;/wsp:OneOrMore&gt;
        &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${preserveRequestPath}"/&gt;
                        &lt;L7p:Operator operatorNull="null"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item dataType="included"&gt;
                                &lt;L7p:Type variableDataType="boolean"/&gt;
                            &lt;/L7p:item&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="true"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${preserveRequestPath}"/&gt;
                        &lt;L7p:Operator operatorNull="null"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item dataType="included"&gt;
                                &lt;L7p:Type variableDataType="boolean"/&gt;
                            &lt;/L7p:item&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="false"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:Base64Expression stringValue="ZmFsc2U="/&gt;
                        &lt;L7p:VariableToSet stringValue="preserveRequestPath"/&gt;
                    &lt;/L7p:SetVariable&gt;
                &lt;/wsp:OneOrMore&gt;
                &lt;L7p:FalseAssertion/&gt;
            &lt;/wsp:All&gt;
            &lt;L7p:ComparisonAssertion&gt;
                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                &lt;L7p:Expression1 stringValue="${preserveRequestPath}"/&gt;
                &lt;L7p:Operator operatorNull="null"/&gt;
                &lt;L7p:Predicates predicates="included"&gt;
                    &lt;L7p:item dataType="included"&gt;
                        &lt;L7p:Type variableDataType="boolean"/&gt;
                    &lt;/L7p:item&gt;
                    &lt;L7p:item binary="included"&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:RightValue stringValue="false"/&gt;
                    &lt;/L7p:item&gt;
                &lt;/L7p:Predicates&gt;
            &lt;/L7p:ComparisonAssertion&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;L7p:CommentAssertion&gt;
                    &lt;L7p:Comment stringValue="Extract Request Path"/&gt;
                &lt;/L7p:CommentAssertion&gt;
                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                    &lt;L7p:Regex&gt;
                        &lt;L7p:AssertionComment assertionComment="included"&gt;
                            &lt;L7p:Properties mapValue="included"&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="Check for service path ending with &amp;quot;/*&amp;quot;"/&gt;
                                &lt;/L7p:entry&gt;
                            &lt;/L7p:Properties&gt;
                        &lt;/L7p:AssertionComment&gt;
                        &lt;L7p:AutoTarget booleanValue="false"/&gt;
                        &lt;L7p:CaptureVar stringValue="service.basePath"/&gt;
                        &lt;L7p:OtherTargetMessageVariable stringValue="service.resolutionUri"/&gt;
                        &lt;L7p:Regex stringValue=".+(?=\/\*)"/&gt;
                        &lt;L7p:Replacement stringValue=""/&gt;
                        &lt;L7p:Target target="OTHER"/&gt;
                    &lt;/L7p:Regex&gt;
                    &lt;L7p:Regex&gt;
                        &lt;L7p:AssertionComment assertionComment="included"&gt;
                            &lt;L7p:Properties mapValue="included"&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="Check for service path ending in &amp;quot;*&amp;quot;, but not &amp;quot;/*&amp;quot;"/&gt;
                                &lt;/L7p:entry&gt;
                            &lt;/L7p:Properties&gt;
                        &lt;/L7p:AssertionComment&gt;
                        &lt;L7p:AutoTarget booleanValue="false"/&gt;
                        &lt;L7p:CaptureVar stringValue="service.basePath"/&gt;
                        &lt;L7p:OtherTargetMessageVariable stringValue="service.resolutionUri"/&gt;
                        &lt;L7p:Regex stringValue=".+(?=\*)"/&gt;
                        &lt;L7p:Replacement stringValue=""/&gt;
                        &lt;L7p:Target target="OTHER"/&gt;
                    &lt;/L7p:Regex&gt;
                &lt;/wsp:OneOrMore&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnVybC5wYXRofSR7cmVxdWVzdC51cmwucXVlcnl9"/&gt;
                    &lt;L7p:VariableToSet stringValue="service.requestPath"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:Regex&gt;
                    &lt;L7p:AutoTarget booleanValue="false"/&gt;
                    &lt;L7p:IncludeEntireExpressionCapture booleanValue="false"/&gt;
                    &lt;L7p:OtherTargetMessageVariable stringValue="service.requestPath"/&gt;
                    &lt;L7p:PatternContainsVariables booleanValue="true"/&gt;
                    &lt;L7p:Regex stringValue="^${service.basePath[0]}"/&gt;
                    &lt;L7p:Replace booleanValue="true"/&gt;
                    &lt;L7p:ReplaceRepeatCount intValue="1"/&gt;
                    &lt;L7p:Replacement stringValue=""/&gt;
                    &lt;L7p:Target target="OTHER"/&gt;
                &lt;/L7p:Regex&gt;
                &lt;L7p:FalseAssertion&gt;
                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="Never let this evaluate to true, as the next validation step must execute"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:AssertionComment&gt;
                &lt;/L7p:FalseAssertion&gt;
            &lt;/wsp:All&gt;
            &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                &lt;L7p:CommentAssertion&gt;
                    &lt;L7p:Comment stringValue="Validate that the request path we got is empty, or starts with a slash or question mark"/&gt;
                &lt;/L7p:CommentAssertion&gt;
                &lt;L7p:ComparisonAssertion&gt;
                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="Allow for empty request path"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:AssertionComment&gt;
                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                    &lt;L7p:Expression1 stringValue="${service.requestPath}"/&gt;
                    &lt;L7p:Operator operatorNull="null"/&gt;
                    &lt;L7p:Predicates predicates="included"&gt;
                        &lt;L7p:item dataType="included"&gt;
                            &lt;L7p:Type variableDataType="string"/&gt;
                        &lt;/L7p:item&gt;
                        &lt;L7p:item stringLength="included"/&gt;
                    &lt;/L7p:Predicates&gt;
                &lt;/L7p:ComparisonAssertion&gt;
                &lt;L7p:Regex&gt;
                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="Validate nonempty request paths start with / or ?"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:AssertionComment&gt;
                    &lt;L7p:AutoTarget booleanValue="false"/&gt;
                    &lt;L7p:OtherTargetMessageVariable stringValue="service.requestPath"/&gt;
                    &lt;L7p:Regex stringValue="^(\/|\?)"/&gt;
                    &lt;L7p:Replacement stringValue=""/&gt;
                    &lt;L7p:Target target="OTHER"/&gt;
                &lt;/L7p:Regex&gt;
                &lt;wsp:All wsp:Usage="Required"&gt;
                    &lt;L7p:CustomizeErrorResponse&gt;
                        &lt;L7p:Content stringValue="{&amp;quot;error&amp;quot;:&amp;quot;bad_request&amp;quot;,&amp;quot;message&amp;quot;:&amp;quot;The requested URL appears to be invalid.&amp;quot;}"/&gt;
                        &lt;L7p:ContentType stringValue="application/json; charset=UTF-8"/&gt;
                        &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                        &lt;L7p:HttpStatus stringValue="400"/&gt;
                    &lt;/L7p:CustomizeErrorResponse&gt;
                    &lt;L7p:FalseAssertion/&gt;
                &lt;/wsp:All&gt;
            &lt;/wsp:OneOrMore&gt;
        &lt;/wsp:OneOrMore&gt;
        &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;L7p:CommentAssertion&gt;
                    &lt;L7p:Comment stringValue="Check for service.requestPath and update targetUrl accordingly"/&gt;
                &lt;/L7p:CommentAssertion&gt;
                &lt;L7p:ComparisonAssertion&gt;
                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                    &lt;L7p:Expression1 stringValue="${service.requestPath}"/&gt;
                    &lt;L7p:Operator operatorNull="null"/&gt;
                    &lt;L7p:Predicates predicates="included"&gt;
                        &lt;L7p:item dataType="included"&gt;
                            &lt;L7p:Type variableDataType="string"/&gt;
                        &lt;/L7p:item&gt;
                        &lt;L7p:item stringLength="included"&gt;
                            &lt;L7p:Max intValue="-1"/&gt;
                        &lt;/L7p:item&gt;
                    &lt;/L7p:Predicates&gt;
                &lt;/L7p:ComparisonAssertion&gt;
                &lt;L7p:Regex&gt;
                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="Strip trailing &amp;quot;*&amp;quot;, &amp;quot;/&amp;quot; or ordered combinations thereof"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:AssertionComment&gt;
                    &lt;L7p:AutoTarget booleanValue="false"/&gt;
                    &lt;L7p:OtherTargetMessageVariable stringValue="targetUrl"/&gt;
                    &lt;L7p:Regex stringValue="(\/\*?)$"/&gt;
                    &lt;L7p:Replace booleanValue="true"/&gt;
                    &lt;L7p:Replacement stringValue=""/&gt;
                    &lt;L7p:Target target="OTHER"/&gt;
                &lt;/L7p:Regex&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="JHt0YXJnZXRVcmx9JHtzZXJ2aWNlLnJlcXVlc3RQYXRofQ=="/&gt;
                    &lt;L7p:VariableToSet stringValue="targetUrl"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;wsp:All wsp:Usage="Required"&gt;
                    &lt;L7p:Regex&gt;
                        &lt;L7p:AssertionComment assertionComment="included"&gt;
                            &lt;L7p:Properties mapValue="included"&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="Does the target URL omit a path?"/&gt;
                                &lt;/L7p:entry&gt;
                            &lt;/L7p:Properties&gt;
                        &lt;/L7p:AssertionComment&gt;
                        &lt;L7p:AutoTarget booleanValue="false"/&gt;
                        &lt;L7p:Regex stringValue="^https?\:\/\/[^\/]+$"/&gt;
                        &lt;L7p:Replacement stringValue=""/&gt;
                    &lt;/L7p:Regex&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:Base64Expression stringValue="JHt0YXJnZXRVcmx9Lw=="/&gt;
                        &lt;L7p:VariableToSet stringValue="targetUrl"/&gt;
                    &lt;/L7p:SetVariable&gt;
                &lt;/wsp:All&gt;
                &lt;L7p:FalseAssertion&gt;
                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="Never allow this branch to evaluate to true, as this would stop routing"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:AssertionComment&gt;
                &lt;/L7p:FalseAssertion&gt;
            &lt;/wsp:All&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;L7p:ComparisonAssertion&gt;
                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                    &lt;L7p:Expression1 stringValue="${httpMethod}"/&gt;
                    &lt;L7p:Operator operatorNull="null"/&gt;
                    &lt;L7p:Predicates predicates="included"&gt;
                        &lt;L7p:item dataType="included"&gt;
                            &lt;L7p:Type variableDataType="string"/&gt;
                        &lt;/L7p:item&gt;
                        &lt;L7p:item binary="included"&gt;
                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                            &lt;L7p:RightValue stringValue="&amp;lt;Automatic&gt;"/&gt;
                        &lt;/L7p:item&gt;
                    &lt;/L7p:Predicates&gt;
                &lt;/L7p:ComparisonAssertion&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="JHtyZXF1ZXN0Lmh0dHAubWV0aG9kfQ=="/&gt;
                    &lt;L7p:VariableToSet stringValue="httpMethod"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:FalseAssertion/&gt;
            &lt;/wsp:All&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;L7p:CommentAssertion&gt;
                    &lt;L7p:Comment stringValue="Send request to HTTP endpoint"/&gt;
                &lt;/L7p:CommentAssertion&gt;
                &lt;L7p:HttpRoutingAssertion&gt;
                    &lt;L7p:CurrentSecurityHeaderHandling intValue="3"/&gt;
                    &lt;L7p:FailOnErrorStatus booleanValue="false"/&gt;
                    &lt;L7p:HttpMethod httpMethod="OTHER"/&gt;
                    &lt;L7p:HttpMethodAsString stringValue="${httpMethod}"/&gt;
                    &lt;L7p:ProtectedServiceUrl stringValue="${targetUrl}"/&gt;
                    &lt;L7p:ProxyPassword stringValueNull="null"/&gt;
                    &lt;L7p:ProxyUsername stringValueNull="null"/&gt;
                    &lt;L7p:RequestHeaderRules httpPassthroughRuleSet="included"&gt;
                        &lt;L7p:ForwardAll booleanValue="true"/&gt;
                        &lt;L7p:Rules httpPassthroughRules="included"&gt;
                            &lt;L7p:item httpPassthroughRule="included"&gt;
                                &lt;L7p:Name stringValue="Cookie"/&gt;
                            &lt;/L7p:item&gt;
                            &lt;L7p:item httpPassthroughRule="included"&gt;
                                &lt;L7p:Name stringValue="SOAPAction"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Rules&gt;
                    &lt;/L7p:RequestHeaderRules&gt;
                    &lt;L7p:RequestParamRules httpPassthroughRuleSet="included"&gt;
                        &lt;L7p:ForwardAll booleanValue="true"/&gt;
                        &lt;L7p:Rules httpPassthroughRules="included"/&gt;
                    &lt;/L7p:RequestParamRules&gt;
                    &lt;L7p:ResponseHeaderRules httpPassthroughRuleSet="included"&gt;
                        &lt;L7p:ForwardAll booleanValue="true"/&gt;
                        &lt;L7p:Rules httpPassthroughRules="included"&gt;
                            &lt;L7p:item httpPassthroughRule="included"&gt;
                                &lt;L7p:Name stringValue="Set-Cookie"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Rules&gt;
                    &lt;/L7p:ResponseHeaderRules&gt;
                    &lt;L7p:SamlAssertionVersion intValue="2"/&gt;
                    &lt;L7p:UsesNoKey booleanValue="true"/&gt;
                &lt;/L7p:HttpRoutingAssertion&gt;
                &lt;L7p:AuditDetailAssertion&gt;
                    &lt;L7p:Detail stringValue="${request.tcp.remoteIP} [${gateway.time.local}] &amp;quot;${httpMethod} ${targetUrl}&amp;quot;"/&gt;
                    &lt;L7p:LoggingOnly booleanValue="true"/&gt;
                &lt;/L7p:AuditDetailAssertion&gt;
                &lt;wsp:All wsp:Usage="Required"&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="Process HTTP endpoint response"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                        &lt;wsp:All wsp:Usage="Required"&gt;
                            &lt;L7p:ComparisonAssertion&gt;
                                &lt;L7p:AssertionComment assertionComment="included"&gt;
                                    &lt;L7p:Properties mapValue="included"&gt;
                                    &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="LEFT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="HTTP status code check"/&gt;
                                    &lt;/L7p:entry&gt;
                                    &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="If HTTP status code is greater than or equal to 400, return the error from the target service"/&gt;
                                    &lt;/L7p:entry&gt;
                                    &lt;/L7p:Properties&gt;
                                &lt;/L7p:AssertionComment&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:Expression1 stringValue="${httpRouting.reasonCode}"/&gt;
                                &lt;L7p:Operator operatorNull="null"/&gt;
                                &lt;L7p:Predicates predicates="included"&gt;
                                    &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="int"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Operator operator="GE"/&gt;
                                    &lt;L7p:RightValue stringValue="400"/&gt;
                                    &lt;/L7p:item&gt;
                                &lt;/L7p:Predicates&gt;
                            &lt;/L7p:ComparisonAssertion&gt;
                            &lt;L7p:CustomizeErrorResponse&gt;
                                &lt;L7p:Content stringValue="${response.mainpart}"/&gt;
                                &lt;L7p:ContentType stringValue="${response.contentType}"/&gt;
                                &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                                &lt;L7p:HttpStatus stringValue="${httpRouting.reasonCode}"/&gt;
                            &lt;/L7p:CustomizeErrorResponse&gt;
                            &lt;L7p:FalseAssertion/&gt;
                            &lt;L7p:assertionComment&gt;
                                &lt;L7p:Properties mapValue="included"&gt;
                                    &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="LEFT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="Route successful error handling"/&gt;
                                    &lt;/L7p:entry&gt;
                                    &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="Handle errors from target service after a success route"/&gt;
                                    &lt;/L7p:entry&gt;
                                &lt;/L7p:Properties&gt;
                            &lt;/L7p:assertionComment&gt;
                        &lt;/wsp:All&gt;
                        &lt;wsp:All wsp:Usage="Required"&gt;
                            &lt;L7p:ComparisonAssertion&gt;
                                &lt;L7p:AssertionComment assertionComment="included"&gt;
                                    &lt;L7p:Properties mapValue="included"&gt;
                                    &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="LEFT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="HTTP status code check"/&gt;
                                    &lt;/L7p:entry&gt;
                                    &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="If HTTP status code is greater than or equal to 0 and less than 400, continue processing"/&gt;
                                    &lt;/L7p:entry&gt;
                                    &lt;/L7p:Properties&gt;
                                &lt;/L7p:AssertionComment&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:Expression1 stringValue="${httpRouting.reasonCode}"/&gt;
                                &lt;L7p:Operator operatorNull="null"/&gt;
                                &lt;L7p:Predicates predicates="included"&gt;
                                    &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="int"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Operator operator="LT"/&gt;
                                    &lt;L7p:RightValue stringValue="400"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Operator operator="GE"/&gt;
                                    &lt;L7p:RightValue stringValue="0"/&gt;
                                    &lt;/L7p:item&gt;
                                &lt;/L7p:Predicates&gt;
                            &lt;/L7p:ComparisonAssertion&gt;
                            &lt;L7p:TrueAssertion/&gt;
                        &lt;/wsp:All&gt;
                    &lt;/wsp:OneOrMore&gt;
                &lt;/wsp:All&gt;
            &lt;/wsp:All&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;L7p:CommentAssertion&gt;
                    &lt;L7p:Comment stringValue="Process HTTP routing assertion error"/&gt;
                &lt;/L7p:CommentAssertion&gt;
                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                    &lt;wsp:All wsp:Usage="Required"&gt;
                        &lt;L7p:ComparisonAssertion&gt;
                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                            &lt;L7p:Expression1 stringValue="${httpRouting.reasonCode}"/&gt;
                            &lt;L7p:Operator operatorNull="null"/&gt;
                            &lt;L7p:Predicates predicates="included"&gt;
                                &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="int"/&gt;
                                &lt;/L7p:item&gt;
                                &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:RightValue stringValue="-1"/&gt;
                                &lt;/L7p:item&gt;
                            &lt;/L7p:Predicates&gt;
                        &lt;/L7p:ComparisonAssertion&gt;
                        &lt;L7p:SetVariable&gt;
                            &lt;L7p:Base64Expression stringValue="SG9zdCBub3QgZm91bmQ="/&gt;
                            &lt;L7p:VariableToSet stringValue="errorMessage"/&gt;
                        &lt;/L7p:SetVariable&gt;
                        &lt;L7p:assertionComment&gt;
                            &lt;L7p:Properties mapValue="included"&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="LEFT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="Route successful error handling"/&gt;
                                &lt;/L7p:entry&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="Handle errors from target service after a success route"/&gt;
                                &lt;/L7p:entry&gt;
                            &lt;/L7p:Properties&gt;
                        &lt;/L7p:assertionComment&gt;
                    &lt;/wsp:All&gt;
                    &lt;wsp:All wsp:Usage="Required"&gt;
                        &lt;L7p:ComparisonAssertion&gt;
                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                            &lt;L7p:Expression1 stringValue="${httpRouting.reasonCode}"/&gt;
                            &lt;L7p:Operator operatorNull="null"/&gt;
                            &lt;L7p:Predicates predicates="included"&gt;
                                &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="int"/&gt;
                                &lt;/L7p:item&gt;
                                &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:RightValue stringValue="-2"/&gt;
                                &lt;/L7p:item&gt;
                            &lt;/L7p:Predicates&gt;
                        &lt;/L7p:ComparisonAssertion&gt;
                        &lt;L7p:SetVariable&gt;
                            &lt;L7p:Base64Expression stringValue="QmFkIFVSTA=="/&gt;
                            &lt;L7p:VariableToSet stringValue="errorMessage"/&gt;
                        &lt;/L7p:SetVariable&gt;
                        &lt;L7p:assertionComment&gt;
                            &lt;L7p:Properties mapValue="included"&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="LEFT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="Route successful error handling"/&gt;
                                &lt;/L7p:entry&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="Handle errors from target service after a success route"/&gt;
                                &lt;/L7p:entry&gt;
                            &lt;/L7p:Properties&gt;
                        &lt;/L7p:assertionComment&gt;
                    &lt;/wsp:All&gt;
                    &lt;wsp:All wsp:Usage="Required"&gt;
                        &lt;L7p:ComparisonAssertion&gt;
                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                            &lt;L7p:Expression1 stringValue="${httpRouting.reasonCode}"/&gt;
                            &lt;L7p:Operator operatorNull="null"/&gt;
                            &lt;L7p:Predicates predicates="included"&gt;
                                &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="int"/&gt;
                                &lt;/L7p:item&gt;
                                &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:RightValue stringValue="-3"/&gt;
                                &lt;/L7p:item&gt;
                            &lt;/L7p:Predicates&gt;
                        &lt;/L7p:ComparisonAssertion&gt;
                        &lt;L7p:SetVariable&gt;
                            &lt;L7p:Base64Expression stringValue="Q29ubmVjdGlvbiB0aW1lb3V0"/&gt;
                            &lt;L7p:VariableToSet stringValue="errorMessage"/&gt;
                        &lt;/L7p:SetVariable&gt;
                        &lt;L7p:assertionComment&gt;
                            &lt;L7p:Properties mapValue="included"&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="LEFT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="Route successful error handling"/&gt;
                                &lt;/L7p:entry&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="Handle errors from target service after a success route"/&gt;
                                &lt;/L7p:entry&gt;
                            &lt;/L7p:Properties&gt;
                        &lt;/L7p:assertionComment&gt;
                    &lt;/wsp:All&gt;
                    &lt;wsp:All wsp:Usage="Required"&gt;
                        &lt;L7p:ComparisonAssertion&gt;
                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                            &lt;L7p:Expression1 stringValue="${httpRouting.reasonCode}"/&gt;
                            &lt;L7p:Operator operatorNull="null"/&gt;
                            &lt;L7p:Predicates predicates="included"&gt;
                                &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="int"/&gt;
                                &lt;/L7p:item&gt;
                                &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:RightValue stringValue="-4"/&gt;
                                &lt;/L7p:item&gt;
                            &lt;/L7p:Predicates&gt;
                        &lt;/L7p:ComparisonAssertion&gt;
                        &lt;L7p:SetVariable&gt;
                            &lt;L7p:Base64Expression stringValue="UmVhZCB0aW1lb3V0"/&gt;
                            &lt;L7p:VariableToSet stringValue="errorMessage"/&gt;
                        &lt;/L7p:SetVariable&gt;
                        &lt;L7p:assertionComment&gt;
                            &lt;L7p:Properties mapValue="included"&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="LEFT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="Route successful error handling"/&gt;
                                &lt;/L7p:entry&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="Handle errors from target service after a success route"/&gt;
                                &lt;/L7p:entry&gt;
                            &lt;/L7p:Properties&gt;
                        &lt;/L7p:assertionComment&gt;
                    &lt;/wsp:All&gt;
                    &lt;wsp:All wsp:Usage="Required"&gt;
                        &lt;L7p:ComparisonAssertion&gt;
                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                            &lt;L7p:Expression1 stringValue="${httpRouting.reasonCode}"/&gt;
                            &lt;L7p:Operator operatorNull="null"/&gt;
                            &lt;L7p:Predicates predicates="included"&gt;
                                &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="int"/&gt;
                                &lt;/L7p:item&gt;
                                &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:RightValue stringValue="-5"/&gt;
                                &lt;/L7p:item&gt;
                            &lt;/L7p:Predicates&gt;
                        &lt;/L7p:ComparisonAssertion&gt;
                        &lt;L7p:SetVariable&gt;
                            &lt;L7p:Base64Expression stringValue="VW5kZWZpbmVk"/&gt;
                            &lt;L7p:VariableToSet stringValue="errorMessage"/&gt;
                        &lt;/L7p:SetVariable&gt;
                        &lt;L7p:assertionComment&gt;
                            &lt;L7p:Properties mapValue="included"&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="LEFT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="Route successful error handling"/&gt;
                                &lt;/L7p:entry&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="Handle errors from target service after a success route"/&gt;
                                &lt;/L7p:entry&gt;
                            &lt;/L7p:Properties&gt;
                        &lt;/L7p:assertionComment&gt;
                    &lt;/wsp:All&gt;
                    &lt;wsp:All wsp:Usage="Required"&gt;
                        &lt;L7p:ComparisonAssertion&gt;
                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                            &lt;L7p:Expression1 stringValue="${httpRouting.reasonCode}"/&gt;
                            &lt;L7p:Operator operatorNull="null"/&gt;
                            &lt;L7p:Predicates predicates="included"&gt;
                                &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="int"/&gt;
                                &lt;/L7p:item&gt;
                                &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Operator operator="LE"/&gt;
                                    &lt;L7p:RightValue stringValue="-6"/&gt;
                                &lt;/L7p:item&gt;
                            &lt;/L7p:Predicates&gt;
                        &lt;/L7p:ComparisonAssertion&gt;
                        &lt;L7p:SetVariable&gt;
                            &lt;L7p:Base64Expression stringValue="VW5rbm93biBlcnJvcg=="/&gt;
                            &lt;L7p:VariableToSet stringValue="errorMessage"/&gt;
                        &lt;/L7p:SetVariable&gt;
                        &lt;L7p:assertionComment&gt;
                            &lt;L7p:Properties mapValue="included"&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="LEFT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="Route successful error handling"/&gt;
                                &lt;/L7p:entry&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="Handle errors from target service after a success route"/&gt;
                                &lt;/L7p:entry&gt;
                            &lt;/L7p:Properties&gt;
                        &lt;/L7p:assertionComment&gt;
                    &lt;/wsp:All&gt;
                &lt;/wsp:OneOrMore&gt;
                &lt;L7p:CustomizeErrorResponse&gt;
                    &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
  "reason code" : "${httpRouting.reasonCode}",
  "error message" : "${errorMessage}"
}]]&gt;&lt;/L7p:Content&gt;
                    &lt;L7p:ContentType stringValue="application/json"/&gt;
                    &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                &lt;/L7p:CustomizeErrorResponse&gt;
                &lt;L7p:FalseAssertion/&gt;
            &lt;/wsp:All&gt;
        &lt;/wsp:OneOrMore&gt;
    &lt;/wsp:All&gt;
&lt;/wsp:Policy&gt;
</l7:Resource>
                        </l7:ResourceSet>
                    </l7:Resources>
                </l7:Policy>
            </l7:Resource>
        </l7:Item>
    </l7:References>
    <l7:Mappings>
        <l7:Mapping action="NewOrUpdate" srcId="00000000000000000000000000000002:SSL" srcUri="https://4fea7d3780ca:9443/restman/1.0/privateKeys/00000000000000000000000000000002:SSL" type="SSG_KEY_ENTRY"/>
        <l7:Mapping action="NewOrExisting" srcId="2a97ddf9a6e77162832b9c27bc8f57e0" srcUri="https://4fea7d3780ca:9443/restman/1.0/folders/2a97ddf9a6e77162832b9c27bc8f57e0" type="FOLDER">
            <l7:Properties>
                <l7:Property key="FailOnNew">
                    <l7:BooleanValue>true</l7:BooleanValue>
                </l7:Property>
            </l7:Properties>
        </l7:Mapping>
        <l7:Mapping action="NewOrUpdate" srcId="acac82df78079fc9b90ecda997d1ebd1" srcUri="https://4fea7d3780ca:9443/restman/1.0/policies/acac82df78079fc9b90ecda997d1ebd1" type="POLICY"/>
    </l7:Mappings>
</l7:Bundle>
